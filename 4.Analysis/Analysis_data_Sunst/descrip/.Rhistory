getwd()
pacman::p_load("lme4","tidyverse","bruceR","ggplot2","ggridges","psych","psychTools","DataExplorer","ggsci","patchwork","cowplot","ggpubr","BayesFactor","careless","rticles"," TreeBUGS","igraph","brms","here","qgraph","randomForest","bootnet")
pacman::p_load("ggpubr","gghalves","qgraph")
library(glasso)
pacman::p_load("lme4","tidyverse","bruceR","ggplot2","ggridges","psych","psychTools","DataExplorer","ggsci","patchwork","cowplot","ggpubr","BayesFactor","careless","rticles"," TreeBUGS","igraph","brms","here","qgraph","randomForest","bootnet")
pacman::p_load("ggpubr","gghalves","qgraph","glasso")
day3_q_all<-read.csv("../../../Data/all/day3_q_all.csv")
day3_q_all<-read.csv("../../Data/all/day3_q_all.csv")
SRET<-read.csv("../../Data/all/SRET_all.csv")%>%
subset(., ID %in% day3_q_all$ID)
ALT1_all<-read.csv("../../Data/all/ALT1_all.csv")%>%
subset(., ID %in% day3_q_all$ID)
day0_all<-read.csv("../../Data/all/day0_all.csv")%>%
subset(., ID %in% day3_q_all$ID)
day1_q_all<-read.csv("../../Data/all/day1_q_all.csv")%>%
subset(., ID %in% day3_q_all$ID)
day2_q_all<-read.csv("../../Data/all/day2_q_all.csv")%>%
subset(., ID %in% day3_q_all$ID)
IAT_all<-read.csv("../../Data/all/IAT_all.csv")%>%
subset(., ID %in% day3_q_all$ID)
ALT2_all<-read.csv("../../Data/all/ALT2_all.csv")%>%
subset(., ID %in% day3_q_all$ID)
day0t2_q<- merge(day0_all, day1_q_all, by = "ID", all = TRUE) %>%
merge(day2_q_all, by = "ID", all = TRUE)%>%
mutate(    #总分计算
phq_al = rowSums(select(., starts_with("phq")), na.rm = TRUE),
gad_al = rowSums(select(., starts_with("gad")), na.rm = TRUE),
selfclarity_al = rowSums(select(., starts_with("selfclarity")), na.rm = TRUE),
ses_al = rowSums(select(., starts_with("ses")), na.rm = TRUE),
coreself_al =rowSums(select(., starts_with("coreself")), na.rm = TRUE),
SGPS_al = rowSums(select(., starts_with("SGPS")), na.rm = TRUE),
hsns_al = rowSums(select(., starts_with("hsns")), na.rm = TRUE),
NPI_al = rowSums(select(., starts_with("NPI")), na.rm = TRUE),
swb_al = rowSums(select(., starts_with("swb")), na.rm = TRUE),
LOT_al = rowSums(select(., starts_with("LOT")), na.rm = TRUE),
sde_al= rowSums(select(., starts_with("sde")), na.rm = TRUE),
IM_al= rowSums(select(., starts_with("IM")), na.rm = TRUE),
MorIden_al= rowSums(select(., starts_with("MorIden")), na.rm = TRUE),
moralSeImag_al= rowSums(select(., starts_with("moralSeImag")), na.rm = TRUE),
IPC_al = (rowSums(select(., starts_with("IPC")), na.rm = TRUE)+24) #以7分制评分，评分从-3（很不同意）到+3（很同意），计算时需要在原始总分基础上加上24分，分类表的分值范围为0 – 48
)%>%mutate(gad = case_when(
gad_al >= 0 & gad_al <= 4 ~ "无",
gad_al >= 5 & gad_al <= 9 ~ "轻度",
gad_al >= 10 & gad_al <= 14 ~ "中度",
gad_al >= 15 ~ "重度",
TRUE ~ NA_character_ ##为焦虑分级
))%>%
mutate(phq = case_when(
phq_al >= 0 & phq_al <= 4 ~ "无",
phq_al >= 5 & phq_al <= 9 ~ "轻度",
phq_al >= 10 & phq_al <= 14 ~ "中度",
phq_al >= 15 & phq_al <= 19 ~ "中重度",
phq_al >= 20  ~ "重度",
TRUE ~ NA_character_ ##为抑郁分级
))
View(day0t2_q)
day0t2_q<-day0t2_q%>%
select(-c("X.x","No","ParticipantlD.x","subj_idx","subj_name","X.1.x","X.y","ParticipantlD.y","friend name.x","trap1",
"correct answer","trap1 item","ParticipantlD","trap2","trap2_item","friend name.y","X.1.y"))%>%
rename(friend_sex=Sex)
day0t2_q<-day0t2_q%>%
select(-c("X.x","No","ParticipantlD.x","subj_idx","subj_name","X.1.x","X.y","ParticipantID.y","friend name.x","trap1",
"correct answer","trap1 item","ParticipantlD","trap2","trap2_item","friend name.y","X.1.y"))%>%
rename(friend_sex=Sex)
day0t2_q<-day0t2_q%>%
select(-c("X.x","No","ParticipantID.x","subj_idx","subj_name","X.1.x","X.y","ParticipantID.y","friend name.x","trap1",
"correct answer","trap1 item","ParticipantlD","trap2","trap2_item","friend name.y","X.1.y"))%>%
rename(friend_sex=Sex)
day0t2_q<-day0t2_q%>%
select(-c("X.x","No","ParticipantID.x","subj_idx","subj_name","X.1.x","X.y","ParticipantID.y","friend_name.x","trap1",
"correct answer","trap1 item","ParticipantlD","trap2","trap2_item","friend_name.y","X.1.y"))%>%
rename(friend_sex=Sex)
day0t2_q<-day0t2_q%>%
select(-c("X.x","No","ParticipantID.x","subj_idx","subj_name","X.1.x","X.y","ParticipantID.y","friend_name.x","trap1",
"correct_answer","trap1_item","ParticipantlD","trap2","trap2_item","friend_name.y","X.1.y"))%>%
rename(friend_sex=Sex)
day0t2_q<-day0t2_q%>%
select(-c("X.x","No","ParticipantID.x","subj_idx","subj_name","X.1.x","X.y","ParticipantID.y","friend_name.x","trap1",
"correct_answer","trap1_item","ParticipantID","trap2","trap2_item","friend_name.y","X.1.y"))%>%
rename(friend_sex=Sex)
day3_q_all<-day3_q_all%>%
mutate(
phq_al = rowSums(select(., starts_with("phq")), na.rm = TRUE),
gad_al = rowSums(select(., starts_with("gad")), na.rm = TRUE),
selfclarity_al = rowSums(select(., starts_with("selfclarity")), na.rm = TRUE),
ses_al = rowSums(select(., starts_with("ses")), na.rm = TRUE),
coreself_al =rowSums(select(., starts_with("coreself")), na.rm = TRUE),
SGPS_al = rowSums(select(., starts_with("SGPS")), na.rm = TRUE),
hsns_al = rowSums(select(., starts_with("hsns")), na.rm = TRUE),
NPI_al = rowSums(select(., starts_with("NPI")), na.rm = TRUE),
swb_al = rowSums(select(., starts_with("swb")), na.rm = TRUE),
LOT_al = rowSums(select(., starts_with("LOT")), na.rm = TRUE),
sde_al= rowSums(select(., starts_with("sde")), na.rm = TRUE),
IM_al= rowSums(select(., starts_with("IM")), na.rm = TRUE),
MorIden_al= rowSums(select(., starts_with("MorIden")), na.rm = TRUE),
moralSeImag_al= rowSums(select(., starts_with("moralSeImag")), na.rm = TRUE),
IPC_al = (rowSums(select(., starts_with("IPC")), na.rm = TRUE)+24)
)%>%mutate(gad = case_when(
gad_al >= 0 & gad_al <= 4 ~ "无",
gad_al >= 5 & gad_al <= 9 ~ "轻度",
gad_al >= 10 & gad_al <= 14 ~ "中度",
gad_al >= 15 ~ "重度",
TRUE ~ NA_character_
))%>%
mutate(phq = case_when(
phq_al >= 0 & phq_al <= 4 ~ "无",
phq_al >= 5 & phq_al <= 9 ~ "轻度",
phq_al >= 10 & phq_al <= 14 ~ "中度",
phq_al >= 15 & phq_al <= 19 ~ "中重度",
phq_al >= 20  ~ "重度",
TRUE ~ NA_character_
))%>%
rename(Ability =domain_rating_1,##能力
Attraction=domain_rating_2,##身体吸引力
Wealth=domain_rating_3, ##物质财富
Social=domain_rating_4,##社交技能
Moral=domain_rating_5)%>%##道德
mutate(domain_al=Ability+Attraction+Wealth+Social+Moral)
View(day3_q_all)
day0t2_q<- merge(day0_all, day1_q_all, by = "ID", all = TRUE) %>%
merge(day2_q_all, by = "ID", all = TRUE)%>%
mutate(    #总分计算
phq_al = rowSums(select(., starts_with("phq")), na.rm = TRUE),
gad_al = rowSums(select(., starts_with("gad")), na.rm = TRUE),
selfclarity_al = rowSums(select(., starts_with("selfclarity")), na.rm = TRUE),
ses_al = rowSums(select(., starts_with("ses")), na.rm = TRUE),
coreself_al =rowSums(select(., starts_with("coreself")), na.rm = TRUE),
SGPS_al = rowSums(select(., starts_with("SGPS")), na.rm = TRUE),
hsns_al = rowSums(select(., starts_with("hsns")), na.rm = TRUE),
NPI_al = rowSums(select(., starts_with("NPI")), na.rm = TRUE),
swb_al = rowSums(select(., starts_with("swb")), na.rm = TRUE),
LOT_al = rowSums(select(., starts_with("LOT")), na.rm = TRUE),
sde_al= rowSums(select(., starts_with("sde")), na.rm = TRUE),
IM_al= rowSums(select(., starts_with("IM")), na.rm = TRUE),
MorIden_al= rowSums(select(., starts_with("MorIden")), na.rm = TRUE),
moralSeImag_al= rowSums(select(., starts_with("moralSeImag")), na.rm = TRUE),
IPC_al = (rowSums(select(., starts_with("IPC")), na.rm = TRUE)+24) #以7分制评分，评分从-3（很不同意）到+3（很同意），计算时需要在原始总分基础上加上24分，分类表的分值范围为0 – 48
)%>%mutate(gad = case_when(
gad_al >= 0 & gad_al <= 4 ~ "无",
gad_al >= 5 & gad_al <= 9 ~ "轻度",
gad_al >= 10 & gad_al <= 14 ~ "中度",
gad_al >= 15 ~ "重度",
TRUE ~ NA_character_ ##为焦虑分级
))%>%
mutate(phq = case_when(
phq_al >= 0 & phq_al <= 4 ~ "无",
phq_al >= 5 & phq_al <= 9 ~ "轻度",
phq_al >= 10 & phq_al <= 14 ~ "中度",
phq_al >= 15 & phq_al <= 19 ~ "中重度",
phq_al >= 20  ~ "重度",
TRUE ~ NA_character_ ##为抑郁分级
))
day3_q_all<-day3_q_all%>%
select(-c("X","trap3", "ParticipantID", "trap3_item"))
View(IAT_all)
##数据预处理，区分相容与不相容的block，
IAT_data <- IAT_all%>%
mutate(ID = as.character(ID)) %>%
mutate(ParticipantID = as.character(ParticipantID)) %>%
mutate(rt=as.numeric(rt))%>%
group_by(ID) %>%
mutate(###将block进行领域分类，分成“道德”和“能力”
version_attrib = case_when(
task_id == "ability"~ (version_attrib[response == "0"& !is.na(version_attrib)]),
TRUE ~ version_attrib),
version_target = case_when(
task_id == "ability"~ (version_target[response == "0"& !is.na(version_target)]),
TRUE ~ version_target),
version_attrib2 = case_when(
task_id == "moral"~ (version_attrib2[response == "0"& !is.na(version_attrib2)]),
TRUE ~ version_attrib2),
version_target2 = case_when(
task_id == "moral"~ (version_target2[response == "0"& !is.na(version_target2)]),
TRUE ~ version_target2))%>%
mutate(version = NA)%>%
mutate(### 相容为A，不相容为B，练习阶段为1，正式为2
version = case_when(
version_attrib == version_target & task_id == "ability" & screen_id == 3 ~ "A1",
version_attrib == version_target & task_id == "ability" & screen_id == 4 ~ "A2",
version_attrib == version_target & task_id == "ability" & screen_id == 6 ~ "B1",
version_attrib == version_target & task_id == "ability" & screen_id == 7 ~ "B2",
version_attrib != version_target & task_id == "ability" & screen_id == 3 ~ "B1",
version_attrib != version_target & task_id == "ability" & screen_id == 4 ~ "B2",
version_attrib != version_target & task_id == "ability" & screen_id == 6 ~ "A1",
version_attrib != version_target & task_id == "ability" & screen_id == 7 ~ "A2",
version_attrib2 == version_target2 & task_id == "moral" & screen_id == 3 ~ "A1",
version_attrib2 == version_target2 & task_id == "moral" & screen_id == 4 ~ "A2",
version_attrib2 == version_target2 & task_id == "moral" & screen_id == 6 ~ "B1",
version_attrib2 == version_target2 & task_id == "moral" & screen_id == 7 ~ "B2",
version_attrib2 != version_target2 & task_id == "moral" & screen_id == 3 ~ "B1",
version_attrib2 != version_target2 & task_id == "moral" & screen_id == 4 ~ "B2",
version_attrib2 != version_target2 & task_id == "moral" & screen_id == 6 ~ "A1",
version_attrib2 != version_target2 & task_id == "moral" & screen_id == 7 ~ "A2",
TRUE ~ version  # 如果没有满足条件的情况，保持原值
)) %>%
filter(screen_id %in% c(3, 4, 6, 7)) %>%
filter(rt<=10000)%>%
mutate(
block_type = case_when(
version %in% c("A1", "A2") ~ "compatible",
version %in% c("B1", "B2") ~ "incompatible",))%>%
mutate(con = case_when(
block_type == "compatible" & condition %in% c("other", "negative") ~ "消极_朋友",
block_type == "compatible" & condition %in% c("self", "positive") ~ "积极_自我",
block_type == "incompatible" & condition %in% c("other", "positive") ~ "积极_朋友",
block_type == "incompatible" & condition %in% c("self", "negative") ~ "消极_自我"
))
####计算出原始数据的均值，标准差
IAT_data1<-IAT_data%>%
group_by(ID,task_id,block_type,version) %>%  ##condition是4类标签的，task_id是moral和ability，version是A1,A2,B1,B2
summarize(
mean_rt = mean(rt),
sd_rt = sd(rt),
row_n = n(),
se_rt = sd(rt) / sqrt(row_n))
print(IAT_data1)
##将错误的试次的反应时替换为平均反应时+600 ms
IAT_data<-IAT_data%>%
left_join(IAT_data1%>%select(ID,task_id,block_type,version,mean_rt),by=c("ID","task_id","block_type","version"))%>%
mutate(rt=ifelse(correct=="false",mean_rt+600,rt))
###计算取代完错误试次后的数据的均值，标准差
IAT_data1<-IAT_data%>%
group_by(ID,task_id,block_type,version) %>%  ##condition是4类标签的，task_id是moral和ability，version是A1,A2,B1,B2
summarize(
mean_rt = mean(rt),
sd_rt = sd(rt),
row_n = n(),
se_rt = sd(rt) / sqrt(row_n))
## IAT_data1用于计算d值，IAT_data包括原始的相容（积极-自我，消极-朋友）与不相容（积极-朋友，消极-自我）
IAT_data_D<-IAT_data1%>%
ungroup()%>%
select(-c("block_type","se_rt"))%>%
pivot_wider(names_from = version, values_from = c(mean_rt, sd_rt,row_n)) %>%
group_by(ID,task_id) %>% #task_id是领域(moral,ability)   #ID,version
reframe(
diff_B1A1 = round((mean_rt_B1 - mean_rt_A1), digits = 3),
diff_B2A2 =round(( mean_rt_B2 - mean_rt_A2), digits = 3),
SD_B1A1 = round((sqrt((((row_n_A1-1)*(sd_rt_A1^2)+(row_n_B1-1)*(sd_rt_B1^2))+((row_n_A1+row_n_B1)*((mean_rt_A1-mean_rt_B1)^2)/4))/(row_n_A1+row_n_B1-1))), digits = 3),
SD_B2A2 = round((sqrt((((row_n_A2-1)*(sd_rt_A2^2)+(row_n_B2-1)*(sd_rt_B2^2))+((row_n_A2+row_n_B2)*((mean_rt_A2-mean_rt_B2)^2)/4))/(row_n_A2+row_n_B2-1))), digits = 3),
D= round(((diff_B1A1/SD_B1A1) + (diff_B2A2/SD_B2A2))/2, digits = 3)
)%>%
mutate(
effect = case_when(
abs(D) <= 0.2 ~ "small",
abs(D) <= 0.5 ~ "mid",
TRUE ~ "big")) #分为moral，ability两个领域的IAT_D
print(IAT_data_D)
IAT_data_D<-IAT_data_D%>%
rename(domain=task_id,IAT_SE=D)
View(IAT_data_D)
getwd() #查看工作目录，
#清空环境
rm(list = ls())
subj_phase_day3 <- function(phase,Eligible,Moneny, Paid_date) {
# 读取 subj_day0_phase_003 数据
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/",phase, "/subj_day0_",phase, ".xlsx"))
# 导入文件，修改phase_002
subj_day3<-read.csv(list.files(paste0("../../../Data/raw/day3/", phase, "/"),pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8",colClasses=c("UserId"="character"))%>%
slice(-1)%>%
select(-c("Subject.IDs","NodeId","Node","Env_Q1","Env_Q2","Env_Q3","Env_Q4","Env_Q5","X"))%>%
rename(
USERID=UserId,
Time_day3=Time,
)%>%
mutate(Eligible=Eligible,
Moneny=Moneny,
Paid_date=Paid_date)%>%
merge(.,subj_day0[, c("USERID", "ID","ParticipantID")], by = "USERID", all.x = TRUE)
####由于脑岛故障，未能在脑岛保存，但是在邮箱收到数据，找到被试的编号
#####subj_day0_row <- subj_day0[subj_day0$ID == "phase_004_subj_12", c("USERID", "Subject.Name", "ParticipantID", "ID")]
#####subj_day3 <- bind_rows(subj_day3, subj_day0_row)
# 导出文件
write.xlsx(subj_day3, file = paste0("../../../Data/raw/day3/",phase,"/subj_day3_",phase,".xlsx"))
}
# 调用函数并传入相应的 phase 参数,“批次号”，“是否符合要求”，“报酬金额”，“发放报酬的日期”
subj_phase_day3 ("phase_020","yes","109","3.18")
pacman::p_load("tidyverse","openxlsx","here","tidyverse","bruceR","ggplot2","psych","psychTools","DataExplorer","lavaan","rstatix")
subj_phase_day3 <- function(phase,Eligible,Moneny, Paid_date) {
# 读取 subj_day0_phase_003 数据
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/",phase, "/subj_day0_",phase, ".xlsx"))
# 导入文件，修改phase_002
subj_day3<-read.csv(list.files(paste0("../../../Data/raw/day3/", phase, "/"),pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8",colClasses=c("UserId"="character"))%>%
slice(-1)%>%
select(-c("Subject.IDs","NodeId","Node","Env_Q1","Env_Q2","Env_Q3","Env_Q4","Env_Q5","X"))%>%
rename(
USERID=UserId,
Time_day3=Time,
)%>%
mutate(Eligible=Eligible,
Moneny=Moneny,
Paid_date=Paid_date)%>%
merge(.,subj_day0[, c("USERID", "ID","ParticipantID")], by = "USERID", all.x = TRUE)
####由于脑岛故障，未能在脑岛保存，但是在邮箱收到数据，找到被试的编号
#####subj_day0_row <- subj_day0[subj_day0$ID == "phase_004_subj_12", c("USERID", "Subject.Name", "ParticipantID", "ID")]
#####subj_day3 <- bind_rows(subj_day3, subj_day0_row)
# 导出文件
write.xlsx(subj_day3, file = paste0("../../../Data/raw/day3/",phase,"/subj_day3_",phase,".xlsx"))
}
# 调用函数并传入相应的 phase 参数,“批次号”，“是否符合要求”，“报酬金额”，“发放报酬的日期”
subj_phase_day3 ("phase_020","yes","109","3.18")
combine_csv_files <- function(phase,firstnum, lastnum)
{  ##[批次号，输入文件列表的文件范围]
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day3/",phase, "/subj_day3_",phase, ".xlsx"))
subj_day0$USERID<-as.numeric(subj_day0$USERID,digits = 0)
subj_day0<-subj_day0%>% rename(
subj_idx=USERID,
)
# subj_day0$ subj_idx<- gsub("\t", "",subj_day0$ subj_idx)
print(subj_day0)
folder_path<-paste0("../../..//Data/raw/day3/",phase,"/jsPsych")
files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
selected_files <- files[firstnum:lastnum] #输入文件列表的文件范围；起始编号：终止编号
combined_data <- NULL
for (file in files) {
tmp <- read.csv(file, header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8")  # 逐个读取csv文件，fileEncoding可能为UTF-8 或 GBK
if (is.null(combined_data)) {
combined_data <- tmp
} else {
combined_data <- rbind(combined_data, tmp)
}
}
combined_data$subj_idx<-as.numeric(combined_data$subj_idx, digits = 0)
combined_data<-combined_data%>%
merge(., subj_day0[, c("ID", "subj_idx")], by = "subj_idx", all.x = TRUE)%>%#修改phase_002
select(-c("subj_idx"))
print(head(combined_data))
print( unique(combined_data$subj_idx))
write.csv(combined_data, paste0( "../../../Data/raw/day3/",phase,"/day3_",phase,".csv"), row.names = FALSE)
}
# 使用示例，每次运行仅需修改此3个参数
combine_csv_files("phase_020",1,6)
#记录单个被试subject well-being
day3_process<-function(phase){
#创建子文件夹"../../../Data/clean/clean_day3/phase"用于储存清洗后的文件
dir.create(paste0("../../../Data/clean/clean_day3/",phase), recursive = TRUE)
filePath<-paste0("../../../Data/raw/day3/",phase,"/day3_",phase,".csv")
day3 <- read.csv(filePath, fileEncoding = "UTF-8")
#这行代码不是每次都需要，是本次数据有个被试输错被试编号
#day3$ParticipantID[day3$ParticipantID == 1] <- 306
#记录单个被试的IPC，内控感，-3~3，但是没有0，0~1,1~2,2~3
#记录单个被试的NPI
# NPI,1~0,2-1,3-0,4-0,5-1,6-1,7-0,8-0,9-1,10-0,11-0,12-1,13-0,14-1,15-0；NPI-16,全量表分数代表自恋的显性维度，得分0—15，分数越高，显性自恋水平越高；0是第一个选项，对代表自恋的选项进行计分为1，记录每个问题的第一个选项的分值为0还是1
# 记录day3的问卷的数据
day3_q <- day3 %>%
filter(trial_index == 0) %>%
select(ID, everything(), -c("success", "user_agent", "value", "responses", "item_order", "radio_event_ids", "radio_event_times", "key_event_times","mouse_event_times","straightlining","zigzagging","honeypot","question_order","internal_node_id","time_elapsed","trial_index","trial_type","response","stimulus","rt"))%>%
mutate(across(starts_with("IPC"), ~ case_when(. == 0 ~ 1, . == 1 ~ 2, . == 2 ~ 3, TRUE ~ .)))%>%
mutate(
NPI1 = ifelse(NPI1 == "0", 1, 0),
NPI3 = ifelse(NPI3 == "0", 1, 0),
NPI4 = ifelse(NPI4 == "0", 1, 0),
NPI7 = ifelse(NPI7 == "0", 1, 0),
NPI8 = ifelse(NPI8 == "0", 1, 0),
NPI10 = ifelse(NPI10 == "0", 1, 0),
NPI11 = ifelse(NPI11 == "0", 1, 0),
NPI13 = ifelse(NPI13 == "0", 1, 0),
NPI15 = ifelse(NPI15 == "0", 1, 0)
)
output_path <- paste0("../../../Data/clean/clean_day3/",phase,"/day3_q_",phase,".csv")
write.csv(day3_q, output_path)
trap3<-day3%>%
filter(grepl("在", trap3_item) )%>%
select(c("ID","ParticipantID","trap3","trap3_item"))# 1 代表“完全不同意”，2 代表“不同意”，3 代表“不确定”，4 代表“同意”，5 代表“完全同意”。
assign("trap3", trap3, envir = .GlobalEnv)
}
day3_process("phase_020")#修改phase_002
select_files <- function(phase) {
main_folder <- "../../../Data/clean/"
day3_q <- read.csv( file=paste0("../../../Data/clean/clean_day3/",phase,"/day3_q_", phase, ".csv"), fileEncoding = 'UTF-8', header = TRUE)
#subj_day3 <- read.xlsx(paste0("../../../Data/select/select_day2.xlsx"))
# 获取所有子文件夹的路径
subfolders <- list.files(path = main_folder, pattern = "clean_day[0-3]", full.names = TRUE)
select_subj <- unique(day3_q$ID)##根据day3的被试选择数据
for (subfolder in subfolders) {
phase_folder <- file.path(subfolder, phase)
# 检查 phase_0xx 文件夹是否存在
if (dir.exists(phase_folder)) {
# 获取 phase_0xx 文件夹下所有 CSV 文件的路径
csv_files <- list.files(path = phase_folder, pattern = "\\.csv$", full.names = TRUE)
# 循环读取每个 CSV 文件
for (csv_file in csv_files) {
var_name <- tools::file_path_sans_ext(basename(csv_file))
data <- read.csv(csv_file, fileEncoding = 'UTF-8', header = TRUE)
# 使用 subset 函数选择符合条件的行
var_data <- subset(data, ID %in% select_subj)
# 修改输出文件路径
output_file <- paste0("../../../Data/select/", var_name, ".csv")
# 修改写入 csv 文件的语句，指定正确的 data.frame 和文件路径
write.csv(var_data, file = output_file, row.names = FALSE)
}
}
}
}
select_files("phase_020")
select_files <- function(phase) {
main_folder <- "../../Data/clean/"
day3_q <- read.csv( file=paste0("../../Data/clean/clean_day3/",phase,"/day3_q_", phase, ".csv"), fileEncoding = 'UTF-8', header = TRUE)
#subj_day3 <- read.xlsx(paste0("../../../Data/select/select_day2.xlsx"))
# 获取所有子文件夹的路径
subfolders <- list.files(path = main_folder, pattern = "clean_day[0-3]", full.names = TRUE)
select_subj <- unique(day3_q$ID)##根据day3的被试选择数据
for (subfolder in subfolders) {
phase_folder <- file.path(subfolder, phase)
# 检查 phase_0xx 文件夹是否存在
if (dir.exists(phase_folder)) {
# 获取 phase_0xx 文件夹下所有 CSV 文件的路径
csv_files <- list.files(path = phase_folder, pattern = "\\.csv$", full.names = TRUE)
# 循环读取每个 CSV 文件
for (csv_file in csv_files) {
var_name <- tools::file_path_sans_ext(basename(csv_file))
data <- read.csv(csv_file, fileEncoding = 'UTF-8', header = TRUE)
# 使用 subset 函数选择符合条件的行
var_data <- subset(data, ID %in% select_subj)
# 修改输出文件路径
output_file <- paste0("../../Data/select/", var_name, ".csv")
# 修改写入 csv 文件的语句，指定正确的 data.frame 和文件路径
write.csv(var_data, file = output_file, row.names = FALSE)
}
}
}
}
select_files("phase_020")
merge_files <- function(prefix) {
input_folder <- "../../../Data/select/"
output_folder <- "../../../Data/all/"
# Get all files with the specified prefix
files <- list.files(path = input_folder, pattern = paste0("^", prefix), full.names = TRUE)
# Check if there are files with the specified prefix
if (length(files) == 0) {
cat("No files with the prefix", prefix, "found in the input folder.\n")
return(NULL)
}
# Read and bind all files with the specified prefix
all_data <- lapply(files, read.csv)
# Convert columns to consistent type (e.g., character)
all_data <- lapply(all_data, function(df) {
df[] <- lapply(df, as.character)
return(df)
})
merged_data <- bind_rows(all_data)
# Define the output file path
output_file <- file.path(output_folder, paste0(prefix, "_all.csv"))
# Write the merged data to the output file
write.csv(merged_data, file = output_file, row.names = FALSE)
cat("Merged files with prefix", prefix, "into", output_file, "\n")
}
# Merge files for different prefixes
merge_files("day0")
merge_files("ALT2")
merge_files("day1_q")
merge_files("day2_q")
merge_files("ALT1")
merge_files("IAT")
merge_files("SRET")
merge_files("day3_q")
merge_files <- function(prefix) {
input_folder <- "../../Data/select/"
output_folder <- "../../Data/all/"
# Get all files with the specified prefix
files <- list.files(path = input_folder, pattern = paste0("^", prefix), full.names = TRUE)
# Check if there are files with the specified prefix
if (length(files) == 0) {
cat("No files with the prefix", prefix, "found in the input folder.\n")
return(NULL)
}
# Read and bind all files with the specified prefix
all_data <- lapply(files, read.csv)
# Convert columns to consistent type (e.g., character)
all_data <- lapply(all_data, function(df) {
df[] <- lapply(df, as.character)
return(df)
})
merged_data <- bind_rows(all_data)
# Define the output file path
output_file <- file.path(output_folder, paste0(prefix, "_all.csv"))
# Write the merged data to the output file
write.csv(merged_data, file = output_file, row.names = FALSE)
cat("Merged files with prefix", prefix, "into", output_file, "\n")
}
# Merge files for different prefixes
merge_files("day0")
merge_files("ALT2")
merge_files("day1_q")
merge_files("day2_q")
merge_files("ALT1")
merge_files("IAT")
merge_files("SRET")
merge_files("day3_q")

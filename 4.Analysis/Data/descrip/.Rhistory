y = "RT",
title = "RT of ALT1 in Different condition",
caption = "Error bars indicate a standard error"
)  +
theme(
plot.title = element_text(size = 20,
face = "bold",
margin = margin(b = 35)),
axis.line = element_line(color = "#3D4852"),
axis.ticks = element_line(color = "#3D4852"),
panel.grid.major.y = element_line(color = "#DAE1E7"),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()
)
print(ALT1_plot_rt)
ALT1_plot_ACC <- ALT1_data2%>%
ggplot(., aes(x = condition, y = mean_acc, fill = conditionType)) +
geom_bar(stat = "identity", position = position_dodge(), na.rm = TRUE) +
geom_errorbar(aes(ymin = mean_acc - se_acc, ymax = mean_acc + se_acc), position = position_dodge(width = 0.8), width = 0.25)+
geom_text(
aes(label = round(mean_acc, digits = 2)),  # Add labels rounded to the nearest integer
position = position_dodge(width = 0.6),
vjust = -0.8,  # Adjust vertical position of labels
size = 3  # Adjust label size if needed
)+
scale_fill_grey(start = 0.3) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.1),expand = c(0, 0.1)) +
guides(fill = guide_legend(title = "Identity"))+
theme_minimal()  +
labs(
x = "condition",
y = "ACC",
title = "ACC of ALT1 in Different condition",
caption = "Error bars indicate a standard error"
)  +
theme(
plot.title = element_text(size = 20,
face = "bold",
margin = margin(b = 35)),
axis.line = element_line(color = "#3D4852"),
axis.ticks = element_line(color = "#3D4852"),
panel.grid.major.y = element_line(color = "#DAE1E7"),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()
)
print(ALT1_plot_ACC)
}
ALT1_analysis(read.csv(paste0("../../../Data/clean/clean_day1/","phase_012","/ALT1_","phase_012",".csv")))
ALT1_analysis(read.csv(paste0("../../../Data/clean/clean_day1/","phase_014","/ALT1_","phase_014",".csv")))
IAT_RT_plot(read.csv(paste0("../../../Data/clean/clean_day1/","phase_014","/IAT_","phase_014",".csv")))
View(trap1)
#check out all '.csv' files in a folder, ‘..’ 表示返回上一级目录，因此 ../../.. 表示在当前工作目录的上两级目录下找到 "4.Analysis" 目录
list.files("../../../Data/raw/day1/phase_014/jsPsych",pattern = "\\.csv$", full.names = TRUE)
#修改phase_00x为当前批次号，即可查看本次day1收集到的数据文件
# 汇总本轮day1所有被试的数据
combine_csv_files <- function(phase, firstnum, lastnum) {  ##[批次号，输入文件列表的文件起始编号，终止编号]
folder_path<-paste0("../../../Data/raw/day1/",phase,"/jsPsych")
files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
selected_files <- files[firstnum:lastnum] #输入文件列表的文件范围；起始编号：终止编号
combined_data <- NULL
for (file in files) {
tmp <- read.csv(file, header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8")  # 逐个读取csv文件，fileEncoding可能为UTF-8 或 GBK
if (is.null(combined_data)) {
combined_data <- tmp
} else {
combined_data <- rbind(combined_data, tmp)
}
}
output_file<-paste0("../../../Data/raw/day1/",phase,"/day1_",phase,".csv")#输出文件路径
write.csv(combined_data, output_file, row.names = FALSE)#输出文件
}
# 使用示例，每次运行仅需修改此3个参数，[“批次号”，输入文件列表的文件起始编号，终止编号]
combine_csv_files("phase_014", 1,44)
View(subj_day1)
subj_phase_day1 <- function(phase,Moneny, Paid_date) {
# 读取 subj_day0_phase_00x 数据
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
print(subj_day0)
# 读取 subj_day1_phase_00x 数据
subj_day1 <- read.csv(list.files(paste0("../../../Data/raw/day1/", phase, "/"), pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8", colClasses=c("UserId"="character"))%>%
slice(-1)%>%
select(-c("Subject.IDs", "NodeId", "NodeId.1", "Node.1", "Env_Q1.1", "Env_Q2", "Env_Q3.1", "Env_Q4.1", "Env_Q5.1", "X")) %>%#去除无关列
rename(
USERID = UserId,#脑岛ID
Time_day1 = Time,#作答时间
ever_join_similar = Env_Q1,#是否参加参加过类似的实验
ever_IAT = Env_Q2_item1,#参加过IAT
ever_AlT = Env_Q2_item2,#参加过ALT
ever_ques = Env_Q2_item3,#填写过类似的问卷
join_interval = Env_Q3,#上次参与的时间间隔
going_normal = Env_Q4,#试验是否一切正常
full_screen = Env_Q5,#是否全程全屏
any_problem = Env_Q6,#是否遇到问题
distrub = Env_Q7,#是否遭到干扰
when_disturb = Env_Q8,#什么时候遭到干扰
feedback = Env_Q9,#对实验的体验
aim = Env_Q10#对实验目的的猜测
) %>%
mutate(Eligible = "",
Moneny = Moneny,
Paid_date = Paid_date) %>%
merge(., subj_day0[, c("USERID", "ID", "ParticipantID")], by = "USERID")
str(subj_day1)
assign("subj_day1", subj_day1, envir = .GlobalEnv)
#####由于脑岛故障，未能在脑岛保存，但是在邮箱收到数据，找到被试的编号；phase_012_subj_18
# subj_day0_row <- subj_day0[subj_day0$ID == "phase_010_subj_7", c("USERID", "Subject.Name", "ParticipantID", "ID")]
# subj_day1 <- bind_rows(subj_day1, subj_day0_row)
print(subj_day1)
# 将结果写入 Excel 文件
write.xlsx(subj_day1, paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
}
# 调用函数并传入相应的 phase 参数,“批次号”，“报酬金额”，“发放报酬的日期”
subj_phase_day1("phase_014","10","1.18")
#check out all '.csv' files in a folder, ‘..’ 表示返回上一级目录，因此 ../../.. 表示在当前工作目录的上两级目录下找到 "4.Analysis" 目录
list.files("../../../Data/raw/day1/phase_014/jsPsych",pattern = "\\.csv$", full.names = TRUE)
#修改phase_00x为当前批次号，即可查看本次day1收集到的数据文件
# 汇总本轮day1所有被试的数据
combine_csv_files <- function(phase, firstnum, lastnum) {  ##[批次号，输入文件列表的文件起始编号，终止编号]
folder_path<-paste0("../../../Data/raw/day1/",phase,"/jsPsych")
files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
selected_files <- files[firstnum:lastnum] #输入文件列表的文件范围；起始编号：终止编号
combined_data <- NULL
for (file in files) {
tmp <- read.csv(file, header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8")  # 逐个读取csv文件，fileEncoding可能为UTF-8 或 GBK
if (is.null(combined_data)) {
combined_data <- tmp
} else {
combined_data <- rbind(combined_data, tmp)
}
}
output_file<-paste0("../../../Data/raw/day1/",phase,"/day1_",phase,".csv")#输出文件路径
write.csv(combined_data, output_file, row.names = FALSE)#输出文件
}
# 使用示例，每次运行仅需修改此3个参数，[“批次号”，输入文件列表的文件起始编号，终止编号]
combine_csv_files("phase_014", 1,44)
combine_csv_files <- function(phase, firstnum, lastnum) {  ##[批次号，输入文件列表的文件起始编号，终止编号]
folder_path<-paste0("../../../Data/raw/day1/",phase,"/jsPsych")
files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
selected_files <- files[firstnum:lastnum] #输入文件列表的文件范围；起始编号：终止编号
combined_data <- NULL
for (file in files) {
tmp <- read.csv(file, header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8",colClasses=c("subj_idx"="character"))  # 逐个读取csv文件，fileEncoding可能为UTF-8 或 GBK
if (is.null(combined_data)) {
combined_data <- tmp
} else {
combined_data <- rbind(combined_data, tmp)
}
}
output_file<-paste0("../../../Data/raw/day1/",phase,"/day1_",phase,".csv")#输出文件路径
write.csv(combined_data, output_file, row.names = FALSE)#输出文件
}
# 使用示例，每次运行仅需修改此3个参数，[“批次号”，输入文件列表的文件起始编号，终止编号]
combine_csv_files("phase_014", 1,44)
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", 'phase_014', "/subj_day0_", "phase_014", ".xlsx"))
View(subj_day0)
day1_process<-function(phase){
#创建子文件夹"../../../Data/clean/clean_day1/phase"用于储存清洗后的文件
folder_path <- paste0("../../../Data/clean/clean_day1/",phase)
# 检查文件夹是否存在
if (file.exists(folder_path)) {
# 如果存在，则删除原文件夹
unlink(folder_path, recursive = TRUE)
}
# 创建新的空白文件夹
dir.create(folder_path, recursive = TRUE)
#读取文件
filePath<-paste0("../../../Data/raw/day1/",phase,"/day1_",phase,".csv")
day10<-read.csv(filePath,fileEncoding = 'UTF-8')
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
#记录IAT，选择IAT所涉及的列；task_id区分了domain，ability的区块：若version_attrib = version_target，则自我——积极组合先出现；moral的区块则是依据version_attrib2 = version_target2
IAT <- day10 %>%
select(.,c("subj_idx","ParticipantID","IAT","stimulus","condition","task_id","word","screen_id","rt","RT","response","correct","version_attrib","version_target","version_attrib2","version_target2"))%>%
filter((task_id %in% c("moral", "ability"))| (version_attrib %in% c(1, 2)) | (version_attrib2 %in% c(1, 2)))%>%
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
#记录单个被试ALT基线的数据
ALT1 <- day10 %>%
select(c("subj_idx","ParticipantID","task_id","screen_id","condition","word","response","responses","rt","correct")) %>%
filter((task_id %in% c("ALT1", "ALT1_1","ALT1_2")))%>%
mutate(conditionType = ifelse(condition == word, "match", "nonmatch"))%>%  # condition为呈现的图片，word 为文字标签，若两者一致，条件类型为匹配
mutate(condition = case_when(
condition == "圆形" ~ "circle",
condition == "菱形" ~ "diamond",
condition == "方形" ~ "square",
condition == "三角" ~ "triangle",
condition == "椭圆" ~ "ellipse",
condition == "六边" ~ "hexagon",
condition == "五边" ~ "pentagon",
condition == "梯形" ~ "trapezoid",
TRUE ~ condition
)) %>%
mutate(word = case_when(
word == "圆形" ~ "circle",
word == "菱形" ~ "diamond",
word == "方形" ~ "square",
word == "三角" ~ "triangle",
word == "椭圆" ~ "ellipse",
word == "六边" ~ "hexagon",
word == "五边" ~ "pentagon",
word == "梯形" ~ "trapezoid",
TRUE ~ word
))%>%
mutate(con = paste(condition, conditionType, sep = "_"))%>%#将中文转为英文，且组成条件组合：图形——匹配/不匹配
mutate(rt = ifelse(response=="null", NA, rt),
correct = ifelse(response=="null", NA, correct))%>%#如果被试未作出反应，则反应时rt和正确率correct 均为NA.
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
#记录被试day1的问卷 的数据
day1_all <- day10 %>%
filter(trial_index == 0) %>%
select(subj_idx,ParticipantID,everything(), -c("rt", "stimulus", "response", "trial_type", "trial_index", "time_elapsed", "internal_node_id", "success","user_agent","question_order","responses","item_order","radio_event_ids","radio_event_times","key_event_times","mouse_event_times","straightlining","zigzagging","value","honeypot"))%>%
select(ParticipantID, everything(), -c("timeout", "failed_images", "failed_audio", "failed_video", "view_history", "response_type", "key_press", "avg_frame_time","center_x","center_y","correct_response","correct","identity","Image","word","condition","task_id","screen_id","time_stamp","version_attrib","version_target","IAT","RT","varname","summary","version_attrib2","version_target2"))%>%
mutate(
NPI1 = ifelse(NPI1 == "0", 1, 0),
NPI3 = ifelse(NPI3 == "0", 1, 0),
NPI4 = ifelse(NPI4 == "0", 1, 0),
NPI7 = ifelse(NPI7 == "0", 1, 0),
NPI8 = ifelse(NPI8 == "0", 1, 0),
NPI10 = ifelse(NPI10 == "0", 1, 0),
NPI11 = ifelse(NPI11 == "0", 1, 0),
NPI13 = ifelse(NPI13 == "0", 1, 0),
NPI15 = ifelse(NPI15 == "0", 1, 0)
)%>%
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
day10<-day10%>%
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
output_path <- paste0("../../../Data/raw/day1/",phase,"/day1_",phase, ".csv")
write.csv(day10, output_path)
output_path <- paste0("../../../Data/clean/clean_day1/",phase,"/IAT_",phase,".csv")
write.csv(IAT, output_path)
output_path <- paste0("../../../Data/clean/clean_day1/",phase,"/ALT1_",phase, ".csv")
write.csv(ALT1, output_path)
output_path <- paste0("../../../Data/clean/clean_day1/",phase,"/day1_q_",phase, ".csv")
write.csv(day1_all, output_path)
trap1<-day10%>%
filter(grepl("请", trap1_item))%>%
select(c("ID","ParticipantID","trap1","trap1_item","correct"))
assign("trap1", trap1, envir = .GlobalEnv)   # 将陷阱题导入环境
}
## 运行范例，[标记不同批次]
day1_process("phase_014")
day1_process<-function(phase){
#创建子文件夹"../../../Data/clean/clean_day1/phase"用于储存清洗后的文件
folder_path <- paste0("../../../Data/clean/clean_day1/",phase)
# 检查文件夹是否存在
if (file.exists(folder_path)) {
# 如果存在，则删除原文件夹
unlink(folder_path, recursive = TRUE)
}
# 创建新的空白文件夹
dir.create(folder_path, recursive = TRUE)
#读取文件
filePath<-paste0("../../../Data/raw/day1/",phase,"/day1_",phase,".csv")
day10<-read.csv(filePath,fileEncoding = 'UTF-8')
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
#记录IAT，选择IAT所涉及的列；task_id区分了domain，ability的区块：若version_attrib = version_target，则自我——积极组合先出现；moral的区块则是依据version_attrib2 = version_target2
IAT <- day10 %>%
select(.,c("subj_idx","ParticipantID","IAT","stimulus","condition","task_id","word","screen_id","rt","RT","response","correct","version_attrib","version_target","version_attrib2","version_target2"))%>%
filter((task_id %in% c("moral", "ability"))| (version_attrib %in% c(1, 2)) | (version_attrib2 %in% c(1, 2)))%>%
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
#记录单个被试ALT基线的数据
ALT1 <- day10 %>%
select(c("subj_idx","ParticipantID","task_id","screen_id","condition","word","response","responses","rt","correct")) %>%
filter((task_id %in% c("ALT1", "ALT1_1","ALT1_2")))%>%
mutate(conditionType = ifelse(condition == word, "match", "nonmatch"))%>%  # condition为呈现的图片，word 为文字标签，若两者一致，条件类型为匹配
mutate(condition = case_when(
condition == "圆形" ~ "circle",
condition == "菱形" ~ "diamond",
condition == "方形" ~ "square",
condition == "三角" ~ "triangle",
condition == "椭圆" ~ "ellipse",
condition == "六边" ~ "hexagon",
condition == "五边" ~ "pentagon",
condition == "梯形" ~ "trapezoid",
TRUE ~ condition
)) %>%
mutate(word = case_when(
word == "圆形" ~ "circle",
word == "菱形" ~ "diamond",
word == "方形" ~ "square",
word == "三角" ~ "triangle",
word == "椭圆" ~ "ellipse",
word == "六边" ~ "hexagon",
word == "五边" ~ "pentagon",
word == "梯形" ~ "trapezoid",
TRUE ~ word
))%>%
mutate(con = paste(condition, conditionType, sep = "_"))%>%#将中文转为英文，且组成条件组合：图形——匹配/不匹配
mutate(rt = ifelse(response=="null", NA, rt),
correct = ifelse(response=="null", NA, correct))%>%#如果被试未作出反应，则反应时rt和正确率correct 均为NA.
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
#记录被试day1的问卷 的数据
day1_all <- day10 %>%
filter(trial_index == 0) %>%
select(subj_idx,ParticipantID,everything(), -c("rt", "stimulus", "response", "trial_type", "trial_index", "time_elapsed", "internal_node_id", "success","user_agent","question_order","responses","item_order","radio_event_ids","radio_event_times","key_event_times","mouse_event_times","straightlining","zigzagging","value","honeypot"))%>%
select(ParticipantID, everything(), -c("timeout", "failed_images", "failed_audio", "failed_video", "view_history", "response_type", "key_press", "avg_frame_time","center_x","center_y","correct_response","correct","identity","Image","word","condition","task_id","screen_id","time_stamp","version_attrib","version_target","IAT","RT","varname","summary","version_attrib2","version_target2"))%>%
mutate(
NPI1 = ifelse(NPI1 == "0", 1, 0),
NPI3 = ifelse(NPI3 == "0", 1, 0),
NPI4 = ifelse(NPI4 == "0", 1, 0),
NPI7 = ifelse(NPI7 == "0", 1, 0),
NPI8 = ifelse(NPI8 == "0", 1, 0),
NPI10 = ifelse(NPI10 == "0", 1, 0),
NPI11 = ifelse(NPI11 == "0", 1, 0),
NPI13 = ifelse(NPI13 == "0", 1, 0),
NPI15 = ifelse(NPI15 == "0", 1, 0)
)%>%
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
day10<-day10%>%
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
output_path <- paste0("../../../Data/raw/day1/",phase,"/day1_",phase, ".csv")
# write.csv(day10, output_path)
output_path <- paste0("../../../Data/clean/clean_day1/",phase,"/IAT_",phase,".csv")
# write.csv(IAT, output_path)
output_path <- paste0("../../../Data/clean/clean_day1/",phase,"/ALT1_",phase, ".csv")
#write.csv(ALT1, output_path)
output_path <- paste0("../../../Data/clean/clean_day1/",phase,"/day1_q_",phase, ".csv")
#  write.csv(day1_all, output_path)
trap1<-day10%>%
filter(grepl("请", trap1_item))%>%
select(c("ID","ParticipantID","trap1","trap1_item","correct"))
assign("trap1", trap1, envir = .GlobalEnv)   # 将陷阱题导入环境
}
## 运行范例，[标记不同批次]
day1_process("phase_012")
# 使用示例，每次运行仅需修改此3个参数，[“批次号”，输入文件列表的文件起始编号，终止编号]
combine_csv_files("phase_012", 1,21)
day1_process<-function(phase){
#创建子文件夹"../../../Data/clean/clean_day1/phase"用于储存清洗后的文件
folder_path <- paste0("../../../Data/clean/clean_day1/",phase)
# 检查文件夹是否存在
if (file.exists(folder_path)) {
# 如果存在，则删除原文件夹
unlink(folder_path, recursive = TRUE)
}
# 创建新的空白文件夹
dir.create(folder_path, recursive = TRUE)
#读取文件
filePath<-paste0("../../../Data/raw/day1/",phase,"/day1_",phase,".csv")
day10<-read.csv(filePath,fileEncoding = 'UTF-8')
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
#记录IAT，选择IAT所涉及的列；task_id区分了domain，ability的区块：若version_attrib = version_target，则自我——积极组合先出现；moral的区块则是依据version_attrib2 = version_target2
IAT <- day10 %>%
select(.,c("subj_idx","ParticipantID","IAT","stimulus","condition","task_id","word","screen_id","rt","RT","response","correct","version_attrib","version_target","version_attrib2","version_target2"))%>%
filter((task_id %in% c("moral", "ability"))| (version_attrib %in% c(1, 2)) | (version_attrib2 %in% c(1, 2)))%>%
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
#记录单个被试ALT基线的数据
ALT1 <- day10 %>%
select(c("subj_idx","ParticipantID","task_id","screen_id","condition","word","response","responses","rt","correct")) %>%
filter((task_id %in% c("ALT1", "ALT1_1","ALT1_2")))%>%
mutate(conditionType = ifelse(condition == word, "match", "nonmatch"))%>%  # condition为呈现的图片，word 为文字标签，若两者一致，条件类型为匹配
mutate(condition = case_when(
condition == "圆形" ~ "circle",
condition == "菱形" ~ "diamond",
condition == "方形" ~ "square",
condition == "三角" ~ "triangle",
condition == "椭圆" ~ "ellipse",
condition == "六边" ~ "hexagon",
condition == "五边" ~ "pentagon",
condition == "梯形" ~ "trapezoid",
TRUE ~ condition
)) %>%
mutate(word = case_when(
word == "圆形" ~ "circle",
word == "菱形" ~ "diamond",
word == "方形" ~ "square",
word == "三角" ~ "triangle",
word == "椭圆" ~ "ellipse",
word == "六边" ~ "hexagon",
word == "五边" ~ "pentagon",
word == "梯形" ~ "trapezoid",
TRUE ~ word
))%>%
mutate(con = paste(condition, conditionType, sep = "_"))%>%#将中文转为英文，且组成条件组合：图形——匹配/不匹配
mutate(rt = ifelse(response=="null", NA, rt),
correct = ifelse(response=="null", NA, correct))%>%#如果被试未作出反应，则反应时rt和正确率correct 均为NA.
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
#记录被试day1的问卷 的数据
day1_all <- day10 %>%
filter(trial_index == 0) %>%
select(subj_idx,ParticipantID,everything(), -c("rt", "stimulus", "response", "trial_type", "trial_index", "time_elapsed", "internal_node_id", "success","user_agent","question_order","responses","item_order","radio_event_ids","radio_event_times","key_event_times","mouse_event_times","straightlining","zigzagging","value","honeypot"))%>%
select(ParticipantID, everything(), -c("timeout", "failed_images", "failed_audio", "failed_video", "view_history", "response_type", "key_press", "avg_frame_time","center_x","center_y","correct_response","correct","identity","Image","word","condition","task_id","screen_id","time_stamp","version_attrib","version_target","IAT","RT","varname","summary","version_attrib2","version_target2"))%>%
mutate(
NPI1 = ifelse(NPI1 == "0", 1, 0),
NPI3 = ifelse(NPI3 == "0", 1, 0),
NPI4 = ifelse(NPI4 == "0", 1, 0),
NPI7 = ifelse(NPI7 == "0", 1, 0),
NPI8 = ifelse(NPI8 == "0", 1, 0),
NPI10 = ifelse(NPI10 == "0", 1, 0),
NPI11 = ifelse(NPI11 == "0", 1, 0),
NPI13 = ifelse(NPI13 == "0", 1, 0),
NPI15 = ifelse(NPI15 == "0", 1, 0)
)%>%
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
day10<-day10%>%
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
output_path <- paste0("../../../Data/raw/day1/",phase,"/day1_",phase, ".csv")
# write.csv(day10, output_path)
output_path <- paste0("../../../Data/clean/clean_day1/",phase,"/IAT_",phase,".csv")
# write.csv(IAT, output_path)
output_path <- paste0("../../../Data/clean/clean_day1/",phase,"/ALT1_",phase, ".csv")
#write.csv(ALT1, output_path)
output_path <- paste0("../../../Data/clean/clean_day1/",phase,"/day1_q_",phase, ".csv")
#  write.csv(day1_all, output_path)
trap1<-day10%>%
filter(grepl("请", trap1_item))%>%
select(c("ID","ParticipantID","trap1","trap1_item","correct"))
assign("trap1", trap1, envir = .GlobalEnv)   # 将陷阱题导入环境
}
## 运行范例，[标记不同批次]
day1_process("phase_012")
# 使用示例，每次运行仅需修改此3个参数，[“批次号”，输入文件列表的文件起始编号，终止编号]
combine_csv_files("phase_012", 1,21)
day1_process<-function(phase){
#创建子文件夹"../../../Data/clean/clean_day1/phase"用于储存清洗后的文件
folder_path <- paste0("../../../Data/clean/clean_day1/",phase)
# 检查文件夹是否存在
if (file.exists(folder_path)) {
# 如果存在，则删除原文件夹
unlink(folder_path, recursive = TRUE)
}
# 创建新的空白文件夹
dir.create(folder_path, recursive = TRUE)
#读取文件
filePath<-paste0("../../../Data/raw/day1/",phase,"/day1_",phase,".csv")
day10<-read.csv(filePath,fileEncoding = 'UTF-8')
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
#记录IAT，选择IAT所涉及的列；task_id区分了domain，ability的区块：若version_attrib = version_target，则自我——积极组合先出现；moral的区块则是依据version_attrib2 = version_target2
IAT <- day10 %>%
select(.,c("subj_idx","ParticipantID","IAT","stimulus","condition","task_id","word","screen_id","rt","RT","response","correct","version_attrib","version_target","version_attrib2","version_target2"))%>%
filter((task_id %in% c("moral", "ability"))| (version_attrib %in% c(1, 2)) | (version_attrib2 %in% c(1, 2)))%>%
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
#记录单个被试ALT基线的数据
ALT1 <- day10 %>%
select(c("subj_idx","ParticipantID","task_id","screen_id","condition","word","response","responses","rt","correct")) %>%
filter((task_id %in% c("ALT1", "ALT1_1","ALT1_2")))%>%
mutate(conditionType = ifelse(condition == word, "match", "nonmatch"))%>%  # condition为呈现的图片，word 为文字标签，若两者一致，条件类型为匹配
mutate(condition = case_when(
condition == "圆形" ~ "circle",
condition == "菱形" ~ "diamond",
condition == "方形" ~ "square",
condition == "三角" ~ "triangle",
condition == "椭圆" ~ "ellipse",
condition == "六边" ~ "hexagon",
condition == "五边" ~ "pentagon",
condition == "梯形" ~ "trapezoid",
TRUE ~ condition
)) %>%
mutate(word = case_when(
word == "圆形" ~ "circle",
word == "菱形" ~ "diamond",
word == "方形" ~ "square",
word == "三角" ~ "triangle",
word == "椭圆" ~ "ellipse",
word == "六边" ~ "hexagon",
word == "五边" ~ "pentagon",
word == "梯形" ~ "trapezoid",
TRUE ~ word
))%>%
mutate(con = paste(condition, conditionType, sep = "_"))%>%#将中文转为英文，且组成条件组合：图形——匹配/不匹配
mutate(rt = ifelse(response=="null", NA, rt),
correct = ifelse(response=="null", NA, correct))%>%#如果被试未作出反应，则反应时rt和正确率correct 均为NA.
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
#记录被试day1的问卷 的数据
day1_all <- day10 %>%
filter(trial_index == 0) %>%
select(subj_idx,ParticipantID,everything(), -c("rt", "stimulus", "response", "trial_type", "trial_index", "time_elapsed", "internal_node_id", "success","user_agent","question_order","responses","item_order","radio_event_ids","radio_event_times","key_event_times","mouse_event_times","straightlining","zigzagging","value","honeypot"))%>%
select(ParticipantID, everything(), -c("timeout", "failed_images", "failed_audio", "failed_video", "view_history", "response_type", "key_press", "avg_frame_time","center_x","center_y","correct_response","correct","identity","Image","word","condition","task_id","screen_id","time_stamp","version_attrib","version_target","IAT","RT","varname","summary","version_attrib2","version_target2"))%>%
mutate(
NPI1 = ifelse(NPI1 == "0", 1, 0),
NPI3 = ifelse(NPI3 == "0", 1, 0),
NPI4 = ifelse(NPI4 == "0", 1, 0),
NPI7 = ifelse(NPI7 == "0", 1, 0),
NPI8 = ifelse(NPI8 == "0", 1, 0),
NPI10 = ifelse(NPI10 == "0", 1, 0),
NPI11 = ifelse(NPI11 == "0", 1, 0),
NPI13 = ifelse(NPI13 == "0", 1, 0),
NPI15 = ifelse(NPI15 == "0", 1, 0)
)%>%
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
day10<-day10%>%
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
output_path <- paste0("../../../Data/raw/day1/",phase,"/day1_",phase, ".csv")
# write.csv(day10, output_path)
output_path <- paste0("../../../Data/clean/clean_day1/",phase,"/IAT_",phase,".csv")
# write.csv(IAT, output_path)
output_path <- paste0("../../../Data/clean/clean_day1/",phase,"/ALT1_",phase, ".csv")
#write.csv(ALT1, output_path)
output_path <- paste0("../../../Data/clean/clean_day1/",phase,"/day1_q_",phase, ".csv")
#  write.csv(day1_all, output_path)
trap1<-day10%>%
filter(grepl("请", trap1_item))%>%
select(c("ID","ParticipantID","trap1","trap1_item","correct"))
assign("trap1", trap1, envir = .GlobalEnv)   # 将陷阱题导入环境
}
## 运行范例，[标记不同批次]
day1_process("phase_012")
View(trap1)

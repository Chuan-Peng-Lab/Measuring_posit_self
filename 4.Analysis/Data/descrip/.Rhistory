group_by(ID, con,conditionType) %>%  #按被试与条件分组，con为“图形_匹配/不匹配”，conditionType为“匹配/不匹配”
summarise(
avg_rt = mean(rt, na.rm = TRUE),#分组后计算平均反应时
max_rt = max(rt, na.rm = TRUE),#分组后计算最大反应时
min_rt = min(rt, na.rm = TRUE),#分组后计算最小反应时
sd_rt=sd(rt, na.rm = TRUE), #计算平均反应时的标准差
all_count=n(),#每个条件的总trial数量
row_count = sum(rt>=200 & rt <=1200, na.rm = TRUE),  #每个条件反应时符合条件的总数,舍弃按键太快<200和按键太慢>1200的
correct_count = sum(correct == 1 & rt>=200 & rt <=1200, na.rm = TRUE),#按键速度符合要求，正确反应的
acc = correct_count /all_count #计算正确率= 正确/总数
)%>%
mutate(note = "") %>%
mutate(note = ifelse(acc < 0.6, "invalid", note))%>%#正确率小于0.6，为无效
ungroup()
print(ALT1_select)#查看筛选后的ALT1数据
#IAT部分的数据的筛选
#读取IAT数据
IAT<-read.csv(paste0("../../../Data/clean/clean_day1/",phase,"/IAT_",phase,".csv"))
IAT_select <- IAT %>%
# filter(.,ID != "phase_003_subj_14")%>%#不需要每次有这行代码，本次去除是因为被试重复作答
mutate(ID = as.character(ID)) %>%
mutate(ParticipantID = as.character(ParticipantID)) %>%
filter(screen_id %in% c(3, 4, 6, 7)) %>%  # 选出将来用于分析的block
group_by(ID,task_id) %>%# task_id是领域，按被试和领域分组
summarise(rt_over10000=sum(rt>10000),rt_les300 = sum(rt <= 300), row_count = sum(rt<=10000)) %>% #计算反应时过长的trial数，反应时过短的trial数
mutate(proportion = rt_les300 / row_count) %>% #排除反应时过长的trial以后，计算反应时过短的trial所占的比例
mutate(note = "") %>%
mutate(note = ifelse(proportion > 0.1, "invalid", note))#比例大于0.1，则无效
#查看IAT筛选结果
print(IAT_select)
#合并IAT和ALT的无效数据
ex_subj <- bind_rows(
ALT1_select %>% filter(note == "invalid"),
IAT_select %>% filter(note == "invalid")
)
#查看两个组合后的无效数据
print(ex_subj)
# 读取 subj_day1 数据
subj_day1 <- read.xlsx(paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
# 根据 ex_subj 的 ID 列填充 Eligible 列，如果在无效数据中，则填入no,否则为yes，上传到飞书subj_info的所有参加day1的被试信息
subj_day1 <- subj_day1 %>%
mutate(Eligible = ifelse(ID %in% ex_subj$ID, "no", "yes"))
# 将结果写入 Excel 文件，导出day1所有被试数据
write.xlsx(subj_day1, file = paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
# 从 subj_day1 中筛选 Eligible 列的值为 "yes" 的行，导出符合要求的被试数据
select_day1 <- subj_day1 %>%
filter(Eligible == "yes")
# 将筛选后的结果写入 CSV 文件，这个是导入脑岛的被试信息
write.xlsx(select_day1, file = paste0("../../../Data/raw/day1/", phase, "/select_day1_", phase, ".xlsx"))
}
##仅需修改此代码；分别为“批次号”
select_day1("phase_005")
#修改phase_002
raw_day1_check <- function(phase) {
data<-read.csv(paste0("../../../Data/raw/day1/",phase,"/day1_",phase,".csv"))
trial_idx_prac_ALT1_1 <- data %>%
group_by(ID) %>%
filter(screen_id == "prac_ALT1_1") %>%
summarize(trial_idx_prac_ALT1_1 = min(trial_index))
trial_idx_prac_ALT1_2 <- data %>%
group_by(ID) %>%
filter(screen_id == "prac_ALT1_2") %>%
summarize(trial_idx_prac_ALT1_2= min(trial_index))
trial_idx_IAT_moral <- data %>%
group_by(ID) %>%
filter(task_id == "moral") %>%
summarize(trial_idx_IAT_moral = min(trial_index))
trial_idx_IAT_ability <- data %>%
group_by(ID) %>%
filter(task_id == "ability") %>%
summarize(trial_idx_IAT_ability = min(trial_index))
merged_data <- merge(trial_idx_prac_ALT1_1,trial_idx_prac_ALT1_2, by = "ID", all = TRUE)
merged_data <- merge(merged_data, trial_idx_IAT_moral, by = "ID", all = TRUE)
merged_data <- merge(merged_data, trial_idx_IAT_ability, by = "ID", all = TRUE)
merged_data <- merged_data %>%
left_join(data %>% filter(identity == "match") %>% select(ID, correct_response), by = "ID")%>%
distinct()
merged_data <- merged_data %>%
left_join(data %>% filter(version_attrib %in% c(1, 2) |
version_attrib2 %in% c(1, 2) ) %>% select(ID, version_attrib,version_target,version_attrib2,version_target2), by = "ID")%>%
mutate(IAT_first = ifelse(trial_idx_IAT_moral < trial_idx_IAT_ability, "moral", "ability"))%>%
mutate(ALT_first = ifelse(trial_idx_prac_ALT1_1 < trial_idx_prac_ALT1_2, "ALT1_1", "ALT1_2"))%>%
mutate(order_first = ifelse((trial_idx_IAT_moral < trial_idx_prac_ALT1_1 & trial_idx_IAT_moral < trial_idx_prac_ALT1_2) | (trial_idx_IAT_ability < trial_idx_prac_ALT1_1 & trial_idx_IAT_ability < trial_idx_prac_ALT1_2), "IAT", "ALT"))%>%
rename(attrib_ability=version_attrib,
attrib_moral=version_attrib2,
target_ability=version_target,
target_moral = version_target2)%>%
print(merged_data)
}
raw_day1_check("phase_005")
subj_phase_day1 <- function(phase,Moneny, Paid_date) {
# 读取 subj_day0_phase_003 数据
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
#
subj_day0_row <- subj_day0[subj_day0$ID == "phase_005_subj_17", c("USERID", "Subject.Name", "ParticipantID", "subj_idx")]
# 读取 subj_day1_phase_003 数据
subj_day1 <- read.csv(list.files(paste0("../../../Data/raw/day1/", phase, "/"), pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
slice(-1) %>%
select(-c("Subject.IDs", "NodeId", "NodeId.1", "Node.1", "Env_Q1.1", "Env_Q2", "Env_Q3.1", "Env_Q4.1", "Env_Q5.1", "X")) %>%#去除无关列
rename(
USERID = UserId,#脑岛ID
Time_day1 = Time,#作答时间
ever_join_similar = Env_Q1,#是否参加参加过类似的实验
ever_IAT = Env_Q2_item1,#参加过IAT
ever_AlT = Env_Q2_item2,#参加过ALT
ever_ques = Env_Q2_item3,#填写过类似的问卷
join_interval = Env_Q3,#上次参与的时间间隔
going_normal = Env_Q4,#试验是否一切正常
full_screen = Env_Q5,#是否全程全屏
any_problem = Env_Q6,#是否遇到问题
distrub = Env_Q7,#是否遭到干扰
when_disturb = Env_Q8,#什么时候遭到干扰
feedback = Env_Q9,#对实验的体验
aim = Env_Q10#对实验目的的猜测
) %>%
mutate(Eligible = "",
Moneny = Moneny,
Paid_date = Paid_date) %>%
merge(., subj_day0[, c("USERID", "ID", "ParticipantID")], by = "USERID", all.x = TRUE)%>%
merge(., subj_day0_row, by = "USERID", all.x = TRUE)
# 将结果写入 Excel 文件
write.xlsx(subj_day1, paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
}
# 调用函数并传入相应的 phase 参数,“批次号”，，“报酬金额”，“发放报酬的日期”
subj_phase_day1("phase_005","10","11.24")
subj_phase_day1 <- function(phase,Moneny, Paid_date) {
# 读取 subj_day0_phase_003 数据
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
#
subj_day0_row <- subj_day0[subj_day0$ID == "phase_005_subj_17", c("USERID", "Subject.Name", "ParticipantID", "subj_idx")]
# 读取 subj_day1_phase_003 数据
subj_day1 <- read.csv(list.files(paste0("../../../Data/raw/day1/", phase, "/"), pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
slice(-1) %>%
select(-c("Subject.IDs", "NodeId", "NodeId.1", "Node.1", "Env_Q1.1", "Env_Q2", "Env_Q3.1", "Env_Q4.1", "Env_Q5.1", "X")) %>%#去除无关列
rename(
USERID = UserId,#脑岛ID
Time_day1 = Time,#作答时间
ever_join_similar = Env_Q1,#是否参加参加过类似的实验
ever_IAT = Env_Q2_item1,#参加过IAT
ever_AlT = Env_Q2_item2,#参加过ALT
ever_ques = Env_Q2_item3,#填写过类似的问卷
join_interval = Env_Q3,#上次参与的时间间隔
going_normal = Env_Q4,#试验是否一切正常
full_screen = Env_Q5,#是否全程全屏
any_problem = Env_Q6,#是否遇到问题
distrub = Env_Q7,#是否遭到干扰
when_disturb = Env_Q8,#什么时候遭到干扰
feedback = Env_Q9,#对实验的体验
aim = Env_Q10#对实验目的的猜测
) %>%
mutate(Eligible = "",
Moneny = Moneny,
Paid_date = Paid_date) %>%
merge(., subj_day0[, c("USERID", "ID", "ParticipantID")], by = "USERID", all.x = TRUE)%>%
merge(., subj_day0_row, by = "USERID", all.x = TRUE)
print(subj_day1)
# 将结果写入 Excel 文件
#write.xlsx(subj_day1, paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
}
# 调用函数并传入相应的 phase 参数,“批次号”，，“报酬金额”，“发放报酬的日期”
subj_phase_day1("phase_005","10","11.24")
subj_phase_day1 <- function(phase,Moneny, Paid_date) {
# 读取 subj_day0_phase_003 数据
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
#
subj_day0_row <- subj_day0[subj_day0$ID == "phase_005_subj_17", c("USERID", "Subject.Name", "ParticipantID", "subj_idx")]
print(subj_day0_row)
# 读取 subj_day1_phase_003 数据
subj_day1 <- read.csv(list.files(paste0("../../../Data/raw/day1/", phase, "/"), pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
slice(-1) %>%
select(-c("Subject.IDs", "NodeId", "NodeId.1", "Node.1", "Env_Q1.1", "Env_Q2", "Env_Q3.1", "Env_Q4.1", "Env_Q5.1", "X")) %>%#去除无关列
rename(
USERID = UserId,#脑岛ID
Time_day1 = Time,#作答时间
ever_join_similar = Env_Q1,#是否参加参加过类似的实验
ever_IAT = Env_Q2_item1,#参加过IAT
ever_AlT = Env_Q2_item2,#参加过ALT
ever_ques = Env_Q2_item3,#填写过类似的问卷
join_interval = Env_Q3,#上次参与的时间间隔
going_normal = Env_Q4,#试验是否一切正常
full_screen = Env_Q5,#是否全程全屏
any_problem = Env_Q6,#是否遇到问题
distrub = Env_Q7,#是否遭到干扰
when_disturb = Env_Q8,#什么时候遭到干扰
feedback = Env_Q9,#对实验的体验
aim = Env_Q10#对实验目的的猜测
) %>%
mutate(Eligible = "",
Moneny = Moneny,
Paid_date = Paid_date) %>%
merge(., subj_day0[, c("USERID", "ID", "ParticipantID")], by = "USERID", all.x = TRUE)%>%
merge(., subj_day0_row, by = "USERID", all.x = TRUE)
print(subj_day1)
# 将结果写入 Excel 文件
#write.xlsx(subj_day1, paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
}
# 调用函数并传入相应的 phase 参数,“批次号”，，“报酬金额”，“发放报酬的日期”
subj_phase_day1("phase_005","10","11.24")
subj_phase_day1 <- function(phase,Moneny, Paid_date) {
# 读取 subj_day0_phase_003 数据
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
#
subj_day0_row <- subj_day0[subj_day0$ID == "phase_005_subj_17", c("USERID", "Subject.Name", "ParticipantID", "subj_idx")]
print(subj_day0_row)
# 读取 subj_day1_phase_003 数据
subj_day1 <- read.csv(list.files(paste0("../../../Data/raw/day1/", phase, "/"), pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
slice(-1) %>%
select(-c("Subject.IDs", "NodeId", "NodeId.1", "Node.1", "Env_Q1.1", "Env_Q2", "Env_Q3.1", "Env_Q4.1", "Env_Q5.1", "X")) %>%#去除无关列
rename(
USERID = UserId,#脑岛ID
Time_day1 = Time,#作答时间
ever_join_similar = Env_Q1,#是否参加参加过类似的实验
ever_IAT = Env_Q2_item1,#参加过IAT
ever_AlT = Env_Q2_item2,#参加过ALT
ever_ques = Env_Q2_item3,#填写过类似的问卷
join_interval = Env_Q3,#上次参与的时间间隔
going_normal = Env_Q4,#试验是否一切正常
full_screen = Env_Q5,#是否全程全屏
any_problem = Env_Q6,#是否遇到问题
distrub = Env_Q7,#是否遭到干扰
when_disturb = Env_Q8,#什么时候遭到干扰
feedback = Env_Q9,#对实验的体验
aim = Env_Q10#对实验目的的猜测
) %>%
mutate(Eligible = "",
Moneny = Moneny,
Paid_date = Paid_date) %>%
merge(., subj_day0[, c("USERID", "ID", "ParticipantID")], by = "USERID", all.x = TRUE)%>%
rind(., subj_day0_row, by = "USERID", all.x = TRUE)
print(subj_day1)
# 将结果写入 Excel 文件
#write.xlsx(subj_day1, paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
}
# 调用函数并传入相应的 phase 参数,“批次号”，，“报酬金额”，“发放报酬的日期”
subj_phase_day1("phase_005","10","11.24")
subj_phase_day1 <- function(phase,Moneny, Paid_date) {
# 读取 subj_day0_phase_003 数据
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
#
subj_day0_row <- subj_day0[subj_day0$ID == "phase_005_subj_17", c("USERID", "Subject.Name", "ParticipantID", "subj_idx")]
print(subj_day0_row)
# 读取 subj_day1_phase_003 数据
subj_day1 <- read.csv(list.files(paste0("../../../Data/raw/day1/", phase, "/"), pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
slice(-1) %>%
select(-c("Subject.IDs", "NodeId", "NodeId.1", "Node.1", "Env_Q1.1", "Env_Q2", "Env_Q3.1", "Env_Q4.1", "Env_Q5.1", "X")) %>%#去除无关列
rename(
USERID = UserId,#脑岛ID
Time_day1 = Time,#作答时间
ever_join_similar = Env_Q1,#是否参加参加过类似的实验
ever_IAT = Env_Q2_item1,#参加过IAT
ever_AlT = Env_Q2_item2,#参加过ALT
ever_ques = Env_Q2_item3,#填写过类似的问卷
join_interval = Env_Q3,#上次参与的时间间隔
going_normal = Env_Q4,#试验是否一切正常
full_screen = Env_Q5,#是否全程全屏
any_problem = Env_Q6,#是否遇到问题
distrub = Env_Q7,#是否遭到干扰
when_disturb = Env_Q8,#什么时候遭到干扰
feedback = Env_Q9,#对实验的体验
aim = Env_Q10#对实验目的的猜测
) %>%
mutate(Eligible = "",
Moneny = Moneny,
Paid_date = Paid_date) %>%
merge(., subj_day0[, c("USERID", "ID", "ParticipantID")], by = "USERID", all.x = TRUE)%>%
rbind(., subj_day0_row, by = "USERID", all.x = TRUE)
print(subj_day1)
# 将结果写入 Excel 文件
#write.xlsx(subj_day1, paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
}
# 调用函数并传入相应的 phase 参数,“批次号”，，“报酬金额”，“发放报酬的日期”
subj_phase_day1("phase_005","10","11.24")
subj_phase_day1 <- function(phase,Moneny, Paid_date) {
# 读取 subj_day0_phase_003 数据
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
#
subj_day0_row <- subj_day0[subj_day0$ID == "phase_005_subj_17", c("USERID", "Subject.Name", "ParticipantID", "subj_idx")]
print(subj_day0_row)
# 读取 subj_day1_phase_003 数据
subj_day1 <- read.csv(list.files(paste0("../../../Data/raw/day1/", phase, "/"), pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
slice(-1) %>%
select(-c("Subject.IDs", "NodeId", "NodeId.1", "Node.1", "Env_Q1.1", "Env_Q2", "Env_Q3.1", "Env_Q4.1", "Env_Q5.1", "X")) %>%#去除无关列
rename(
USERID = UserId,#脑岛ID
Time_day1 = Time,#作答时间
ever_join_similar = Env_Q1,#是否参加参加过类似的实验
ever_IAT = Env_Q2_item1,#参加过IAT
ever_AlT = Env_Q2_item2,#参加过ALT
ever_ques = Env_Q2_item3,#填写过类似的问卷
join_interval = Env_Q3,#上次参与的时间间隔
going_normal = Env_Q4,#试验是否一切正常
full_screen = Env_Q5,#是否全程全屏
any_problem = Env_Q6,#是否遇到问题
distrub = Env_Q7,#是否遭到干扰
when_disturb = Env_Q8,#什么时候遭到干扰
feedback = Env_Q9,#对实验的体验
aim = Env_Q10#对实验目的的猜测
) %>%
mutate(Eligible = "",
Moneny = Moneny,
Paid_date = Paid_date) %>%
merge(., subj_day0[, c("USERID", "ID", "ParticipantID")], by = "USERID", all.x = TRUE)
subj_day1 <- bind_rows(subj_day1, subj_day0_row)
print(subj_day1)
# 将结果写入 Excel 文件
#write.xlsx(subj_day1, paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
}
# 调用函数并传入相应的 phase 参数,“批次号”，，“报酬金额”，“发放报酬的日期”
subj_phase_day1("phase_005","10","11.24")
subj_phase_day1 <- function(phase,Moneny, Paid_date) {
# 读取 subj_day0_phase_003 数据
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
# 读取 subj_day1_phase_003 数据
subj_day1 <- read.csv(list.files(paste0("../../../Data/raw/day1/", phase, "/"), pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
slice(-1) %>%
select(-c("Subject.IDs", "NodeId", "NodeId.1", "Node.1", "Env_Q1.1", "Env_Q2", "Env_Q3.1", "Env_Q4.1", "Env_Q5.1", "X")) %>%#去除无关列
rename(
USERID = UserId,#脑岛ID
Time_day1 = Time,#作答时间
ever_join_similar = Env_Q1,#是否参加参加过类似的实验
ever_IAT = Env_Q2_item1,#参加过IAT
ever_AlT = Env_Q2_item2,#参加过ALT
ever_ques = Env_Q2_item3,#填写过类似的问卷
join_interval = Env_Q3,#上次参与的时间间隔
going_normal = Env_Q4,#试验是否一切正常
full_screen = Env_Q5,#是否全程全屏
any_problem = Env_Q6,#是否遇到问题
distrub = Env_Q7,#是否遭到干扰
when_disturb = Env_Q8,#什么时候遭到干扰
feedback = Env_Q9,#对实验的体验
aim = Env_Q10#对实验目的的猜测
) %>%
mutate(Eligible = "",
Moneny = Moneny,
Paid_date = Paid_date) %>%
merge(., subj_day0[, c("USERID", "ID", "ParticipantID")], by = "USERID", all.x = TRUE)
#
subj_day0_row <- subj_day0[subj_day0$ID == "phase_005_subj_17", c("USERID", "Subject.Name", "ParticipantID", "subj_idx")]
subj_day1 <- bind_rows(subj_day1, subj_day0_row)
# 将结果写入 Excel 文件
write.xlsx(subj_day1, paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
}
# 调用函数并传入相应的 phase 参数,“批次号”，，“报酬金额”，“发放报酬的日期”
subj_phase_day1("phase_005","10","11.24")
subj_phase_day1 <- function(phase,Moneny, Paid_date) {
# 读取 subj_day0_phase_003 数据
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
# 读取 subj_day1_phase_003 数据
subj_day1 <- read.csv(list.files(paste0("../../../Data/raw/day1/", phase, "/"), pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
slice(-1) %>%
select(-c("Subject.IDs", "NodeId", "NodeId.1", "Node.1", "Env_Q1.1", "Env_Q2", "Env_Q3.1", "Env_Q4.1", "Env_Q5.1", "X")) %>%#去除无关列
rename(
USERID = UserId,#脑岛ID
Time_day1 = Time,#作答时间
ever_join_similar = Env_Q1,#是否参加参加过类似的实验
ever_IAT = Env_Q2_item1,#参加过IAT
ever_AlT = Env_Q2_item2,#参加过ALT
ever_ques = Env_Q2_item3,#填写过类似的问卷
join_interval = Env_Q3,#上次参与的时间间隔
going_normal = Env_Q4,#试验是否一切正常
full_screen = Env_Q5,#是否全程全屏
any_problem = Env_Q6,#是否遇到问题
distrub = Env_Q7,#是否遭到干扰
when_disturb = Env_Q8,#什么时候遭到干扰
feedback = Env_Q9,#对实验的体验
aim = Env_Q10#对实验目的的猜测
) %>%
mutate(Eligible = "",
Moneny = Moneny,
Paid_date = Paid_date) %>%
merge(., subj_day0[, c("USERID", "ID", "ParticipantID")], by = "USERID", all.x = TRUE)
#
subj_day0_row <- subj_day0[subj_day0$ID == "phase_005_subj_17", c("USERID", "Subject.Name", "ParticipantID", "subj_idx","ID")]
subj_day1 <- bind_rows(subj_day1, subj_day0_row)
# 将结果写入 Excel 文件
write.xlsx(subj_day1, paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
}
# 调用函数并传入相应的 phase 参数,“批次号”，，“报酬金额”，“发放报酬的日期”
subj_phase_day1("phase_005","10","11.24")
subj_phase_day1 <- function(phase,Moneny, Paid_date) {
# 读取 subj_day0_phase_003 数据
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
# 读取 subj_day1_phase_003 数据
subj_day1 <- read.csv(list.files(paste0("../../../Data/raw/day1/", phase, "/"), pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
slice(-1) %>%
select(-c("Subject.IDs", "NodeId", "NodeId.1", "Node.1", "Env_Q1.1", "Env_Q2", "Env_Q3.1", "Env_Q4.1", "Env_Q5.1", "X")) %>%#去除无关列
rename(
USERID = UserId,#脑岛ID
Time_day1 = Time,#作答时间
ever_join_similar = Env_Q1,#是否参加参加过类似的实验
ever_IAT = Env_Q2_item1,#参加过IAT
ever_AlT = Env_Q2_item2,#参加过ALT
ever_ques = Env_Q2_item3,#填写过类似的问卷
join_interval = Env_Q3,#上次参与的时间间隔
going_normal = Env_Q4,#试验是否一切正常
full_screen = Env_Q5,#是否全程全屏
any_problem = Env_Q6,#是否遇到问题
distrub = Env_Q7,#是否遭到干扰
when_disturb = Env_Q8,#什么时候遭到干扰
feedback = Env_Q9,#对实验的体验
aim = Env_Q10#对实验目的的猜测
) %>%
mutate(Eligible = "",
Moneny = Moneny,
Paid_date = Paid_date) %>%
merge(., subj_day0[, c("USERID", "ID", "ParticipantID")], by = "USERID", all.x = TRUE)
#
subj_day0_row <- subj_day0[subj_day0$ID == "phase_005_subj_17", c("USERID", "Subject.Name", "ParticipantID", "subj_idx","ID")]
subj_day1 <- bind_rows(subj_day1, subj_day0_row, all.x = TRUE)
print(subj_day1)
# 将结果写入 Excel 文件
# write.xlsx(subj_day1, paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
}
# 调用函数并传入相应的 phase 参数,“批次号”，，“报酬金额”，“发放报酬的日期”
subj_phase_day1("phase_005","10","11.24")
subj_phase_day1 <- function(phase,Moneny, Paid_date) {
# 读取 subj_day0_phase_003 数据
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
# 读取 subj_day1_phase_003 数据
subj_day1 <- read.csv(list.files(paste0("../../../Data/raw/day1/", phase, "/"), pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
slice(-1) %>%
select(-c("Subject.IDs", "NodeId", "NodeId.1", "Node.1", "Env_Q1.1", "Env_Q2", "Env_Q3.1", "Env_Q4.1", "Env_Q5.1", "X")) %>%#去除无关列
rename(
USERID = UserId,#脑岛ID
Time_day1 = Time,#作答时间
ever_join_similar = Env_Q1,#是否参加参加过类似的实验
ever_IAT = Env_Q2_item1,#参加过IAT
ever_AlT = Env_Q2_item2,#参加过ALT
ever_ques = Env_Q2_item3,#填写过类似的问卷
join_interval = Env_Q3,#上次参与的时间间隔
going_normal = Env_Q4,#试验是否一切正常
full_screen = Env_Q5,#是否全程全屏
any_problem = Env_Q6,#是否遇到问题
distrub = Env_Q7,#是否遭到干扰
when_disturb = Env_Q8,#什么时候遭到干扰
feedback = Env_Q9,#对实验的体验
aim = Env_Q10#对实验目的的猜测
) %>%
mutate(Eligible = "",
Moneny = Moneny,
Paid_date = Paid_date) %>%
merge(., subj_day0[, c("USERID", "ID", "ParticipantID")], by = "USERID", all.x = TRUE)
#
subj_day0_row <- subj_day0[subj_day0$ID == "phase_005_subj_17", c("USERID", "Subject.Name", "ParticipantID", "ID")]
subj_day1 <- bind_rows(subj_day1, subj_day0_row)
# 将结果写入 Excel 文件
write.xlsx(subj_day1, paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
}
# 调用函数并传入相应的 phase 参数,“批次号”，，“报酬金额”，“发放报酬的日期”
subj_phase_day1("phase_005","10","11.24")
select_day1<-function(phase){
# ALT部分的筛选
#读取ALT1文件
ALT1<-read.csv(paste0("../../../Data/clean/clean_day1/",phase,"/ALT1_",phase,".csv"))
ALT1_select<-ALT1 %>%
mutate(ID = as.character(ID)) %>%
mutate(ParticipantID = as.character(ParticipantID)) %>%
mutate(rt=as.numeric(rt))%>% #分别转变被试编号和反应时类型为字符型与数值型
mutate(correct = ifelse(correct == "true", 1, ifelse(correct == "false", 0, NA)))%>% ##重编码correct，1对0错
filter(screen_id%in%c("formal_ALT1_1","formal_ALT1_2") )%>% #选择正式实验的数据
group_by(ID, con,conditionType) %>%  #按被试与条件分组，con为“图形_匹配/不匹配”，conditionType为“匹配/不匹配”
summarise(
avg_rt = mean(rt, na.rm = TRUE),#分组后计算平均反应时
max_rt = max(rt, na.rm = TRUE),#分组后计算最大反应时
min_rt = min(rt, na.rm = TRUE),#分组后计算最小反应时
sd_rt=sd(rt, na.rm = TRUE), #计算平均反应时的标准差
all_count=n(),#每个条件的总trial数量
row_count = sum(rt>=200 & rt <=1200, na.rm = TRUE),  #每个条件反应时符合条件的总数,舍弃按键太快<200和按键太慢>1200的
correct_count = sum(correct == 1 & rt>=200 & rt <=1200, na.rm = TRUE),#按键速度符合要求，正确反应的
acc = correct_count /all_count #计算正确率= 正确/总数
)%>%
mutate(note = "") %>%
mutate(note = ifelse(acc < 0.6, "invalid", note))%>%#正确率小于0.6，为无效
ungroup()
print(ALT1_select)#查看筛选后的ALT1数据
#IAT部分的数据的筛选
#读取IAT数据
IAT<-read.csv(paste0("../../../Data/clean/clean_day1/",phase,"/IAT_",phase,".csv"))
IAT_select <- IAT %>%
# filter(.,ID != "phase_003_subj_14")%>%#不需要每次有这行代码，本次去除是因为被试重复作答
mutate(ID = as.character(ID)) %>%
mutate(ParticipantID = as.character(ParticipantID)) %>%
filter(screen_id %in% c(3, 4, 6, 7)) %>%  # 选出将来用于分析的block
group_by(ID,task_id) %>%# task_id是领域，按被试和领域分组
summarise(rt_over10000=sum(rt>10000),rt_les300 = sum(rt <= 300), row_count = sum(rt<=10000)) %>% #计算反应时过长的trial数，反应时过短的trial数
mutate(proportion = rt_les300 / row_count) %>% #排除反应时过长的trial以后，计算反应时过短的trial所占的比例
mutate(note = "") %>%
mutate(note = ifelse(proportion > 0.1, "invalid", note))#比例大于0.1，则无效
#查看IAT筛选结果
print(IAT_select)
#合并IAT和ALT的无效数据
ex_subj <- bind_rows(
ALT1_select %>% filter(note == "invalid"),
IAT_select %>% filter(note == "invalid")
)
#查看两个组合后的无效数据
print(ex_subj)
# 读取 subj_day1 数据
subj_day1 <- read.xlsx(paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
# 根据 ex_subj 的 ID 列填充 Eligible 列，如果在无效数据中，则填入no,否则为yes，上传到飞书subj_info的所有参加day1的被试信息
subj_day1 <- subj_day1 %>%
mutate(Eligible = ifelse(ID %in% ex_subj$ID, "no", "yes"))
# 将结果写入 Excel 文件，导出day1所有被试数据
write.xlsx(subj_day1, file = paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
# 从 subj_day1 中筛选 Eligible 列的值为 "yes" 的行，导出符合要求的被试数据
select_day1 <- subj_day1 %>%
filter(Eligible == "yes")
# 将筛选后的结果写入 CSV 文件，这个是导入脑岛的被试信息
write.xlsx(select_day1, file = paste0("../../../Data/raw/day1/", phase, "/select_day1_", phase, ".xlsx"))
}
##仅需修改此代码；分别为“批次号”
select_day1("phase_005")

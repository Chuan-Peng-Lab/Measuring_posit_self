reliabilities <- rbind(reliabilities, data.frame(questionnaire = questionnaire, reliability = reliability))
}
# 输出重测信度
print(reliabilities)
getwd() #查看工作目录，work directory is 'Measuring_Pos_Self/4.Analysis/Data/descrip/preprocess'
subj_day0_phase_002<-read.csv(list.files("../../../Data/raw/day0/phase_003/",pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8")%>%
slice(-1)%>%
select(-c("Subject.IDs","NodeId","X"))%>%#去除这些列
rename(
USERID=UserId,#脑岛ID
Time_day0=Time,#实验时间
religion=Info_Q1,#宗教
邮件地址 = Info_Q2,#邮箱
wechat = Info_Q3,#微信
region = Info_Q4,#地区
major = Info_Q5,#专业
left_hand = Info_Q6,#是否左撇子
refresh_rate = Info_Q7,#刷新率
resolution_ratio = Info_Q8#电脑分辨率
) %>%
mutate(Eligible="",#是否符合要求
Moneny="",#报酬金额
Paid_date="")%>%#付偿日期
arrange( USERID)%>%#将脑岛ID从低到高排序
mutate(No= row_number())%>%#按行依次编号
merge(.,day0_all[, c("No", "ID","ParticipantID","subj_idx")], by = "No", all.x = TRUE)%>%
mutate(姓名=ID)#将ID合并进文件
day0_all<-read.csv("../../../Data/clean/clean_day0/phase_003/day0_all_phase_003.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8")
subj_day0_phase_002<-read.csv(list.files("../../../Data/raw/day0/phase_003/",pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8")%>%
slice(-1)%>%
select(-c("Subject.IDs","NodeId","X"))%>%#去除这些列
rename(
USERID=UserId,#脑岛ID
Time_day0=Time,#实验时间
religion=Info_Q1,#宗教
邮件地址 = Info_Q2,#邮箱
wechat = Info_Q3,#微信
region = Info_Q4,#地区
major = Info_Q5,#专业
left_hand = Info_Q6,#是否左撇子
refresh_rate = Info_Q7,#刷新率
resolution_ratio = Info_Q8#电脑分辨率
) %>%
mutate(Eligible="",#是否符合要求
Moneny="",#报酬金额
Paid_date="")%>%#付偿日期
arrange( USERID)%>%#将脑岛ID从低到高排序
mutate(No= row_number())%>%#按行依次编号
merge(.,day0_all[, c("No", "ID","ParticipantID","subj_idx")], by = "No", all.x = TRUE)%>%
mutate(姓名=ID)#将ID合并进文件
View(day0_all)
View(subj_day0_phase_003)
subj_day0_phase_002<-read.csv(list.files("../../../Data/raw/day0/phase_003/",pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8")%>%
slice(-1)%>%
select(-c("Subject.IDs","NodeId","X"))%>%#去除这些列
rename(
USERID=UserId,#脑岛ID
Time_day0=Time,#实验时间
religion=Info_Q1,#宗教
邮件地址 = Info_Q2,#邮箱
wechat = Info_Q3,#微信
region = Info_Q4,#地区
major = Info_Q5,#专业
left_hand = Info_Q6,#是否左撇子
refresh_rate = Info_Q7,#刷新率
resolution_ratio = Info_Q8#电脑分辨率
) %>%
mutate(Eligible="",#是否符合要求
Moneny="",#报酬金额
Paid_date="")%>%#付偿日期
arrange( USERID)%>%#将脑岛ID从低到高排序
mutate(No= row_number())
View(subj_day0_phase_002)
subj_day0_phase_002<- merge(.,day0_all[, c("No", "ID","ParticipantID","subj_idx")], by = "No", all.x = TRUE)
subj_day0_phase_002<- merge(subj_day0_phase_002,day0_all[, c("No", "ID","ParticipantID","subj_idx")], by = "No", all.x = TRUE)
View(day0_all)
subj_day0_phase_002<-read.csv(list.files("../../../Data/raw/day0/phase_003/",pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8")%>%
slice(-1)%>%
select(-c("Subject.IDs","NodeId","X"))%>%#去除这些列
rename(
USERID=UserId,#脑岛ID
Time_day0=Time,#实验时间
religion=Info_Q1,#宗教
邮件地址 = Info_Q2,#邮箱
wechat = Info_Q3,#微信
region = Info_Q4,#地区
major = Info_Q5,#专业
left_hand = Info_Q6,#是否左撇子
refresh_rate = Info_Q7,#刷新率
resolution_ratio = Info_Q8#电脑分辨率
) %>%
mutate(Eligible="",#是否符合要求
Moneny="",#报酬金额
Paid_date="")%>%#付偿日期
arrange( USERID)%>%#将脑岛ID从低到高排序
mutate(No= row_number())%>%#按行依次编号
merge(.,day0_all[, c("No", "ID","ParticipantID","subj_idx")], by = "No", all.x = TRUE)
#check out all '.csv' files in a folder, ‘..’ 表示返回上一级目录，因此 ../../.. 表示在当前工作目录的上两级目录下找到 "4.Analysis" 目录；通过更改批次号“phase_002”，查看对应的文件夹内的文件
list.files("../../../Data/raw/day0/phase_003/jsPsych",pattern = "\\.csv$", full.names = TRUE)
#汇总本轮day0所有被试的数据，##[批次号，输入文件列表的文件起始编号，终止编号]
combine_csv_files <- function(phase, firstnum, lastnum) {
folder_path<-paste0("../../../Data/raw/day0/",phase,"/jsPsych")
files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
selected_files <- files[firstnum:lastnum] #输入文件列表的文件范围“起始编号：终止编号”
combined_data <- NULL
for (file in files) {
tmp <- read.csv(file, header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8")  # 逐个读取csv文件，fileEncoding可能为UTF-8 或 GBK
if (is.null(combined_data)) {
combined_data <- tmp
} else {
combined_data <- rbind(combined_data, tmp)
}
}
output_file<-paste0("../../../Data/raw/day0/",phase,"/day0_",phase,".csv")
write.csv(combined_data,output_file, row.names = FALSE)
}
# 修改"phase_002"，替换成对应的批次
# 使用示例，每次运行仅需修改此3个参数
combine_csv_files("phase_003",1,15)
print(paste0("../../../Data/raw/day0/","phase_003","/day0_","phase_003",".csv"))
# 导入文件，修改文件地址“/phase_002/day0_all_phase_002.csv”中的批次号“phase_002”
day0_all<-read.csv("../../../Data/clean/clean_day0/phase_003/day0_all_phase_003.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
rename(No=X)#重命名列
# 处理 day0 的function
##记录单个被试人口学信息
day0_process<-function(phase){
day0<-read.csv(paste0("../../../Data/raw/day0/",phase,"/day0_",phase,".csv"),fileEncoding = 'UTF-8')
#输出文件
## 记录被试 day0 完成所有问卷的数据，宽数据版
day0_all <- day0 %>%
filter(trial_index == 0) %>%  #选择第一行
select(subj_idx, ParticipantID,everything(), -c("rt", "stimulus", "response", "trial_type", "trial_index", "time_elapsed", "internal_node_id", "success","user_agent","accuracy","question_order","responses","item_order","radio_event_ids","radio_event_times","key_event_times","mouse_event_times","straightlining","zigzagging","honeypot","value"))%>%  #选择列
arrange(ParticipantID)%>%  #按ParticipantID从低到高排序
mutate(ID = paste0(phase,"_subj_", row_number()))%>% #生成新列ID
arrange(subj_idx)
output_path <- paste0("../../../Data/clean/clean_day0/",phase,"/day0_all_",phase, ".csv") #文件的输出路径
write.csv(day0_all,output_path)
}
## 运行范例，每次运行仅需要修改批次号"phase_002"
day0_process("phase_003")
# 导入文件，修改文件地址“/phase_002/day0_all_phase_002.csv”中的批次号“phase_002”
day0_all<-read.csv("../../../Data/clean/clean_day0/phase_003/day0_all_phase_003.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
rename(No=X)#重命名列
# 导入文件，修改文件地址"../../../Data/raw/day0/phase_002/"中的批次号“phase_002”
subj_day0_phase_002<-read.csv(list.files("../../../Data/raw/day0/phase_003/",pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8")%>%
slice(-1)%>%
select(-c("Subject.IDs","NodeId","X"))%>%#去除这些列
rename(
USERID=UserId,#脑岛ID
Time_day0=Time,#实验时间
religion=Info_Q1,#宗教
邮件地址 = Info_Q2,#邮箱
wechat = Info_Q3,#微信
region = Info_Q4,#地区
major = Info_Q5,#专业
left_hand = Info_Q6,#是否左撇子
refresh_rate = Info_Q7,#刷新率
resolution_ratio = Info_Q8#电脑分辨率
) %>%
mutate(Eligible="",#是否符合要求
Moneny="",#报酬金额
Paid_date="")%>%#付偿日期
arrange( USERID)%>%#将脑岛ID从低到高排序
mutate(No= row_number())%>%#按行依次编号
merge(.,day0_all[, c("No", "ID","ParticipantID","subj_idx")], by = "No", all.x = TRUE)%>%
mutate("姓名"=ID)#将ID合并进文件
# 导出文件，输出的文件地址"../../../Data/raw/day0/phase_002/subj_day0_phase_002.xlsx",修改批次号“phase_002”
write.xlsx(subj_day0_phase_002, "../../../Data/raw/day0/phase_003/subj_day0_phase_003.xlsx")
#去掉该数据中的被试脑岛编号和被试姓名
day0_all<-day0_all%>%
select(-c("subj_name","subj_idx"))
write.csv(day0_all,"../../../Data/clean/clean_day0/phase_003/day0_all_phase_003.csv")#修改输出文件名内包含的批次号“phase_002”
write.csv(subj_day0_phase_002, "../../../Data/raw/day0/phase_003/subj_day0_phase_003.csv")
getwd() #查看工作目录，
# 导入文件，"../../../Data/raw/day1/pre2/",修改pre2，它为每批新建的文件夹
subj_day0_phase_003<-read.xlsx("../../../Data/raw/day0/phase_003/subj_day0_phase_003.xlsx")#修改phase_002
View(subj_day0_phase_003)
subj_day0_phase_002<-subj_day0_phase_002%>%
select(-c("姓名"))%>%
rename(email="邮箱地址")
View(subj_day0_phase_002)
subj_day0_phase_002<-subj_day0_phase_002%>%
select(-c("姓名"))%>%
rename(email=邮箱地址)
subj_day0_phase_002<-read.csv(list.files("../../../Data/raw/day0/phase_003/",pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8")%>%
slice(-1)%>%
select(-c("Subject.IDs","NodeId","X"))%>%#去除这些列
rename(
USERID=UserId,#脑岛ID
Time_day0=Time,#实验时间
religion=Info_Q1,#宗教
email = Info_Q2,#邮箱
wechat = Info_Q3,#微信
region = Info_Q4,#地区
major = Info_Q5,#专业
left_hand = Info_Q6,#是否左撇子
refresh_rate = Info_Q7,#刷新率
resolution_ratio = Info_Q8#电脑分辨率
) %>%
mutate(Eligible="",#是否符合要求
Moneny="",#报酬金额
Paid_date="")%>%#付偿日期
arrange( USERID)%>%#将脑岛ID从低到高排序
mutate(No= row_number())%>%#按行依次编号
merge(.,day0_all[, c("No", "ID","ParticipantID","subj_idx")], by = "No", all.x = TRUE)#将ID合并进文件
View(subj_day0_phase_002)
View(subj_day0_phase_003)
subj_email_phase_003<-subj_day0_phase_003%>%
select(c("ID","email","wechat","Subject.Name","region"))
subj_day0_phase_003<-read.xlsx("../../../Data/raw/day0/phase_003/subj_day0_phase_003.xlsx")
subj_email_phase_003<-subj_day0_phase_003%>%
select(c("ID","email","wechat","Subject.Name","region"))
View(subj_day0_phase_003)
subj_email_phase_003<-subj_day0_phase_003%>%
select(c("ID","email","wechat","Subject.Name","region"))
subj_email_phase_003<-subj_day0_phase_003%>%
select(c("ID","e_mail","wechat","Subject.Name","region"))
mutate("姓名"=ID)%>%
rename("邮件地址"=e_mail,
"移动电话"=wechat,
"联系地址"=region
)
View(subj_email_phase_003)
subj_email_phase_003<-subj_day0_phase_003%>%
select(c("ID","e_mail","wechat","Subject.Name","region"))
mutate(姓名=ID)%>%
rename("邮件地址"=e_mail,
"移动电话"=wechat,
"联系地址"=region
)
subj_email_phase_003<-subj_day0_phase_003%>%
select(c("ID","e_mail","wechat","Subject.Name","region"))
rename("姓名"=ID,
"邮件地址"=e_mail,
"移动电话"=wechat,
"联系地址"=region
)
subj_email_phase_003<-subj_day0_phase_003%>%
select(c("ID","e_mail","wechat","Subject.Name","region"))
rename(姓名=ID,
邮件地址=e_mail,
移动电话=wechat,
联系地址=region
)
subj_email_phase_003<-subj_day0_phase_003%>%
select(c("ID","e_mail","wechat","Subject.Name","region"))
rename(#姓名=ID,
邮件地址=e_mail,
移动电话=wechat,
联系地址=region
)
subj_email_phase_003<-subj_day0_phase_003%>%
select(c("ID","e_mail","wechat","Subject.Name","region"))%>%
rename(姓名=ID,
邮件地址=e_mail,
移动电话=wechat,
联系地址=region
)
write.csv(subj_email_phase_003, "../../../Data/raw/day0/phase_003/subj_email_phase_003.csv")
getwd() #查看工作目录，
#清空环境
rm(list = ls())
# 检查是否已安装 pacman
if (!requireNamespace("pacman", quietly = TRUE)) {
install.packages("pacman") }   # 如果未安装，则安装包
# 加载所需要的R包
pacman::p_load("tidyverse","openxlsx","here","tidyverse","bruceR","ggplot2","psych","psychTools","DataExplorer")
subj_phase_day1 <- function(phase,Moneny, Paid_date) {
# 读取 subj_day0_phase_003 数据
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
# 读取 subj_day1_phase_003 数据
subj_day1 <- read.csv(list.files(paste0("../../../Data/raw/day1/", phase, "/"), pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
slice(-1) %>%
select(-c("Subject.IDs", "NodeId", "NodeId.1", "Node.1", "Env_Q1.1", "Env_Q2", "Env_Q3.1", "Env_Q4.1", "Env_Q5.1", "X")) %>%#去除无关列
rename(
USERID = UserId,#脑岛ID
Time_day1 = Time,#作答时间
ever_join_similar = Env_Q1,#是否参加参加过类似的实验
ever_IAT = Env_Q2_item1,#参加过IAT
ever_AlT = Env_Q2_item2,#参加过ALT
ever_ques = Env_Q2_item3,#填写过类似的问卷
join_interval = Env_Q3,#上次参与的时间间隔
going_normal = Env_Q4,#试验是否一切正常
full_screen = Env_Q5,#是否全程全屏
any_problem = Env_Q6,#是否遇到问题
distrub = Env_Q7,#是否遭到干扰
when_disturb = Env_Q8,#什么时候遭到干扰
feedback = Env_Q9,#对实验的体验
aim = Env_Q10#对实验目的的猜测
) %>%
mutate(Eligible = "",
Moneny = Moneny,
Paid_date = Paid_date) %>%
merge(., subj_day0[, c("USERID", "ID", "ParticipantID")], by = "USERID", all.x = TRUE)
# 将结果写入 Excel 文件
write.xlsx(subj_day1, paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
}
# 调用函数并传入相应的 phase 参数,“批次号”，，“报酬金额”，“发放报酬的日期”
subj_phase_day1("phase_003","10","11.1")
#check out all '.csv' files in a folder, ‘..’ 表示返回上一级目录，因此 ../../.. 表示在当前工作目录的上两级目录下找到 "4.Analysis" 目录
list.files("../../../Data/raw/day1/phase_003/jsPsych",pattern = "\\.csv$", full.names = TRUE)#修改phase_003为当前批次号，即可查看本次day1收集到的数据文件
#汇总本轮day1所有被试的数据
combine_csv_files <- function(phase, firstnum, lastnum) {  ##[批次号，输入文件列表的文件起始编号，终止编号]
folder_path<-paste0("../../../Data/raw/day1/",phase,"/jsPsych")
files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
selected_files <- files[firstnum:lastnum] #输入文件列表的文件范围；起始编号：终止编号
combined_data <- NULL
for (file in files) {
tmp <- read.csv(file, header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8")  # 逐个读取csv文件，fileEncoding可能为UTF-8 或 GBK
if (is.null(combined_data)) {
combined_data <- tmp
} else {
combined_data <- rbind(combined_data, tmp)
}
}
output_file<-paste0("../../../Data/raw/day1/",phase,"/day1_",phase,".csv")#输出文件路径
write.csv(combined_data, output_file, row.names = FALSE)#输出文件
}
# 使用示例，每次运行仅需修改此3个参数，[“批次号”，输入文件列表的文件起始编号，终止编号]
combine_csv_files("phase_003", 1,15)
subj_phase_day1 <- function(phase,Moneny, Paid_date) {
# 读取 subj_day0_phase_003 数据
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
# 读取 subj_day1_phase_003 数据
subj_day1 <- read.csv(list.files(paste0("../../../Data/raw/day1/", phase, "/"), pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8") %>%
slice(-1) %>%
select(-c("Subject.IDs", "NodeId", "NodeId.1", "Node.1", "Env_Q1.1", "Env_Q2", "Env_Q3.1", "Env_Q4.1", "Env_Q5.1", "X")) %>%#去除无关列
rename(
USERID = UserId,#脑岛ID
Time_day1 = Time,#作答时间
ever_join_similar = Env_Q1,#是否参加参加过类似的实验
ever_IAT = Env_Q2_item1,#参加过IAT
ever_AlT = Env_Q2_item2,#参加过ALT
ever_ques = Env_Q2_item3,#填写过类似的问卷
join_interval = Env_Q3,#上次参与的时间间隔
going_normal = Env_Q4,#试验是否一切正常
full_screen = Env_Q5,#是否全程全屏
any_problem = Env_Q6,#是否遇到问题
distrub = Env_Q7,#是否遭到干扰
when_disturb = Env_Q8,#什么时候遭到干扰
feedback = Env_Q9,#对实验的体验
aim = Env_Q10#对实验目的的猜测
) %>%
mutate(Eligible = "",
Moneny = Moneny,
Paid_date = Paid_date) %>%
merge(., subj_day0[, c("USERID", "ID", "ParticipantID")], by = "USERID", all.x = TRUE)
# 将结果写入 Excel 文件
write.xlsx(subj_day1, paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
}
# 调用函数并传入相应的 phase 参数,“批次号”，，“报酬金额”，“发放报酬的日期”
subj_phase_day1("phase_004","10","11.11")
#check out all '.csv' files in a folder, ‘..’ 表示返回上一级目录，因此 ../../.. 表示在当前工作目录的上两级目录下找到 "4.Analysis" 目录
list.files("../../../Data/raw/day1/phase_004/jsPsych",pattern = "\\.csv$", full.names = TRUE)#修改phase_003为当前批次号，即可查看本次day1收集到的数据文件
#汇总本轮day1所有被试的数据
combine_csv_files <- function(phase, firstnum, lastnum) {  ##[批次号，输入文件列表的文件起始编号，终止编号]
folder_path<-paste0("../../../Data/raw/day1/",phase,"/jsPsych")
files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
selected_files <- files[firstnum:lastnum] #输入文件列表的文件范围；起始编号：终止编号
combined_data <- NULL
for (file in files) {
tmp <- read.csv(file, header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8")  # 逐个读取csv文件，fileEncoding可能为UTF-8 或 GBK
if (is.null(combined_data)) {
combined_data <- tmp
} else {
combined_data <- rbind(combined_data, tmp)
}
}
output_file<-paste0("../../../Data/raw/day1/",phase,"/day1_",phase,".csv")#输出文件路径
write.csv(combined_data, output_file, row.names = FALSE)#输出文件
}
# 使用示例，每次运行仅需修改此3个参数，[“批次号”，输入文件列表的文件起始编号，终止编号]
combine_csv_files("phase_004", 1,15)
day1_process<-function(phase){
#创建子文件夹"../../../Data/clean/clean_day1/phase"用于储存清洗后的文件
dir.create(paste0("../../../Data/clean/clean_day1/",phase), recursive = TRUE)
#读取文件
filePath<-paste0("../../../Data/raw/day1/",phase,"/day1_",phase,".csv")
day10<-read.csv(filePath,fileEncoding = 'UTF-8')
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
#记录IAT，选择IAT所涉及的列；task_id区分了domain，ability的区块：若version_attrib = version_target，则自我——积极组合先出现；moral的区块则是依据version_attrib2 = version_target2
IAT <- day10 %>%
select(.,c("subj_idx","ParticipantID","IAT","stimulus","condition","task_id","word","screen_id","rt","RT","response","correct","version_attrib","version_target","version_attrib2","version_target2"))%>%
filter((task_id %in% c("moral", "ability"))| (version_attrib %in% c(1, 2)) | (version_attrib2 %in% c(1, 2)))%>%
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
#记录单个被试ALT基线的数据
ALT1 <- day10 %>%
select(c("subj_idx","ParticipantID","task_id","screen_id","condition","word","response","responses","rt","correct")) %>%
filter((task_id %in% c("ALT1", "ALT1_1","ALT1_2")))%>%
mutate(conditionType = ifelse(condition == word, "match", "nonmatch"))%>%  # condition为呈现的图片，word 为文字标签，若两者一致，条件类型为匹配
mutate(condition = case_when(
condition == "圆形" ~ "circle",
condition == "菱形" ~ "diamond",
condition == "方形" ~ "square",
condition == "三角" ~ "triangle",
condition == "椭圆" ~ "ellipse",
condition == "六边" ~ "hexagon",
condition == "五边" ~ "pentagon",
condition == "梯形" ~ "trapezoid",
TRUE ~ condition
)) %>%
mutate(word = case_when(
word == "圆形" ~ "circle",
word == "菱形" ~ "diamond",
word == "方形" ~ "square",
word == "三角" ~ "triangle",
word == "椭圆" ~ "ellipse",
word == "六边" ~ "hexagon",
word == "五边" ~ "pentagon",
word == "梯形" ~ "trapezoid",
TRUE ~ word
))%>%
mutate(con = paste(condition, conditionType, sep = "_"))%>%#将中文转为英文，且组成条件组合：图形——匹配/不匹配
mutate(rt = ifelse(response=="null", NA, rt),
correct = ifelse(response=="null", NA, correct))%>%#如果被试未作出反应，则反应时rt和正确率correct 均为NA.
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
#记录被试day1的问卷 的数据
day1_all <- day10 %>%
filter(trial_index == 0) %>%
select(subj_idx,ParticipantID,everything(), -c("rt", "stimulus", "response", "trial_type", "trial_index", "time_elapsed", "internal_node_id", "success","user_agent","question_order","responses","item_order","radio_event_ids","radio_event_times","key_event_times","mouse_event_times","straightlining","zigzagging","value","honeypot"))%>%
select(ParticipantID, everything(), -c("timeout", "failed_images", "failed_audio", "failed_video", "view_history", "response_type", "key_press", "avg_frame_time","center_x","center_y","correct_response","correct","identity","Image","word","condition","task_id","screen_id","time_stamp","version_attrib","version_target","IAT","RT","varname","summary","version_attrib2","version_target2"))%>%
mutate(
NPI1 = ifelse(NPI1 == "0", 1, 0),
NPI3 = ifelse(NPI3 == "0", 1, 0),
NPI4 = ifelse(NPI4 == "0", 1, 0),
NPI7 = ifelse(NPI7 == "0", 1, 0),
NPI8 = ifelse(NPI8 == "0", 1, 0),
NPI10 = ifelse(NPI10 == "0", 1, 0),
NPI11 = ifelse(NPI11 == "0", 1, 0),
NPI13 = ifelse(NPI13 == "0", 1, 0),
NPI15 = ifelse(NPI15 == "0", 1, 0)
)%>%
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
day10<-day10%>%
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
output_path <- paste0("../../../Data/raw/day1/",phase,"/day1_",phase, ".csv")
write.csv(day10, output_path)
output_path <- paste0("../../../Data/clean/clean_day1/",phase,"/IAT_",phase,".csv")
write.csv(IAT, output_path)
output_path <- paste0("../../../Data/clean/clean_day1/",phase,"/ALT1_",phase, ".csv")
write.csv(ALT1, output_path)
output_path <- paste0("../../../Data/clean/clean_day1/",phase,"/day1_q_",phase, ".csv")
write.csv(day1_all, output_path)
}
## 运行范例，[标记不同批次]
day1_process("phase_004")
select_day1<-function(phase){
# ALT部分的筛选
#读取ALT1文件
ALT1<-read.csv(paste0("../../../Data/clean/clean_day1/",phase,"/ALT1_",phase,".csv"))
ALT1_select<-ALT1 %>%
mutate(ID = as.character(ID)) %>%
mutate(ParticipantID = as.character(ParticipantID)) %>%
mutate(rt=as.numeric(rt))%>% #分别转变被试编号和反应时类型为字符型与数值型
mutate(correct = ifelse(correct == "true", 1, ifelse(correct == "false", 0, NA)))%>% ##重编码correct，1对0错
filter(screen_id%in%c("formal_ALT1_1","formal_ALT1_2") )%>% #选择正式实验的数据
group_by(ID, con,conditionType) %>%  #按被试与条件分组，con为“图形_匹配/不匹配”，conditionType为“匹配/不匹配”
summarise(
avg_rt = mean(rt, na.rm = TRUE),#分组后计算平均反应时
max_rt = max(rt, na.rm = TRUE),#分组后计算最大反应时
min_rt = min(rt, na.rm = TRUE),#分组后计算最小反应时
sd_rt=sd(rt, na.rm = TRUE), #计算平均反应时的标准差
all_count=n(),#每个条件的总trial数量
row_count = sum(rt>=200 & rt <=1200, na.rm = TRUE),  #每个条件反应时符合条件的总数,舍弃按键太快<200和按键太慢>1200的
correct_count = sum(correct == 1 & rt>=200 & rt <=1200, na.rm = TRUE),#按键速度符合要求，正确反应的
acc = correct_count /all_count #计算正确率= 正确/总数
)%>%
mutate(note = "") %>%
mutate(note = ifelse(acc < 0.6, "invalid", note))%>%#正确率小于0.6，为无效
ungroup()
print(ALT1_select)#查看筛选后的ALT1数据
#IAT部分的数据的筛选
#读取IAT数据
IAT<-read.csv(paste0("../../../Data/clean/clean_day1/",phase,"/IAT_",phase,".csv"))
IAT_select <- IAT %>%
# filter(.,ID != "phase_003_subj_14")%>%#不需要每次有这行代码，本次去除是因为被试重复作答
mutate(ID = as.character(ID)) %>%
mutate(ParticipantID = as.character(ParticipantID)) %>%
filter(screen_id %in% c(3, 4, 6, 7)) %>%  # 选出将来用于分析的block
group_by(ID,task_id) %>%# task_id是领域，按被试和领域分组
summarise(rt_over10000=sum(rt>10000),rt_les300 = sum(rt <= 300), row_count = sum(rt<=10000)) %>% #计算反应时过长的trial数，反应时过短的trial数
mutate(proportion = rt_les300 / row_count) %>% #排除反应时过长的trial以后，计算反应时过短的trial所占的比例
mutate(note = "") %>%
mutate(note = ifelse(proportion > 0.1, "invalid", note))#比例大于0.1，则无效
#查看IAT筛选结果
print(IAT_select)
#合并IAT和ALT的无效数据
ex_subj <- bind_rows(
ALT1_select %>% filter(note == "invalid"),
IAT_select %>% filter(note == "invalid")
)
#查看两个组合后的无效数据
print(ex_subj)
# 读取 subj_day1 数据
subj_day1 <- read.xlsx(paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
# 根据 ex_subj 的 ID 列填充 Eligible 列，如果在无效数据中，则填入no,否则为yes，上传到飞书subj_info的所有参加day1的被试信息
subj_day1 <- subj_day1 %>%
mutate(Eligible = ifelse(ID %in% ex_subj$ID, "no", "yes"))
# 将结果写入 Excel 文件，导出day1所有被试数据
write.xlsx(subj_day1, file = paste0("../../../Data/raw/day1/", phase, "/subj_day1_", phase, ".xlsx"))
# 从 subj_day1 中筛选 Eligible 列的值为 "yes" 的行，导出符合要求的被试数据
select_day1 <- subj_day1 %>%
filter(Eligible == "yes")
# 将筛选后的结果写入 CSV 文件，这个是导入脑岛的被试信息
write.xlsx(select_day1, file = paste0("../../../Data/raw/day1/", phase, "/select_day1_", phase, ".xlsx"))
}
##仅需修改此代码；分别为“批次号”
select_day1("phase_004")

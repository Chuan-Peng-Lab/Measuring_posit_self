}
subj_phase_day0("phase_010","yes","1","1.4      ")
plot_descript_day0<-function(phase){
day0_subj<-read.xlsx(paste0("../../../Data/raw/day0/",phase,"/subj_day0_",phase,".xlsx"))
day0_all<-read.csv(paste0("../../../Data/clean/clean_day0/",phase,"/day0_all_",phase,".csv"), fileEncoding = "UTF-8")
invalid_day0<-day0_all%>%
filter(age>59|age<18)%>%
print()
write.xlsx(invalid_day0, file = paste0("../../../Data/raw/day0/", phase, "/invalid_day0_", phase, ".xlsx"))
day0_subj<-day0_subj%>%
filter(!ID %in% invalid_day0$ID)
write.xlsx(day0_subj, file=paste0("../../../Data/raw/day0/",phase,"/subj_day0_",phase,".xlsx"))
day0_all <- day0_all %>%
filter(age<=59&age>=18)%>%
select(-birthday,-ID,No,ParticipantID)%>%
mutate(
age=case_when(
between(age, 18, 28) ~ "18~28",
between(age, 28, 38) ~ "28~38",
between(age, 38, 48) ~ "38~48",
between(age, 48, 59) ~ "48~59",
age>59~ ">59",
TRUE ~ as.character(age)
),
obj_ses1=as.character(obj_ses1),
fri_ses2=as.character(fri_ses2),
sex=case_when(
sex==0~"male",
sex==1~"female",
TRUE ~ as.character(sex)
) ) %>%
mutate(fatherEdu = case_when(
fatherEdu == 0 ~ "zero",
fatherEdu == 1 ~ "elementary",
fatherEdu == 2 ~ "junior",
fatherEdu == 3 ~ "senior",
fatherEdu == 4 ~ "college",
fatherEdu == 5 ~ "graduate",
TRUE ~ as.character(fatherEdu)  # 如果没有匹配到上述条件，保持不变
))%>%
mutate(motherEdu = case_when(
motherEdu == 0 ~ "zero",#没上学
motherEdu == 1 ~ "elementary",#小学
motherEdu == 2 ~ "junior",#初中
motherEdu == 3 ~ "senior",#高中，中专
motherEdu == 4 ~ "college",#大学（专科或本科）
motherEdu == 5 ~ "graduate",#研究生
TRUE ~ as.character(motherEdu)  # 如果没有匹配到上述条件，保持不变
))%>%
mutate(FatherOccupation = case_when(
FatherOccupation == 0 ~ "临时工",
FatherOccupation == 1 ~ "个体经营",
FatherOccupation == 2 ~ "一般管理",
FatherOccupation == 3 ~ "中层管理",
FatherOccupation == 4 ~ "高级管理",
TRUE ~ as.character(FatherOccupation)  # 如果没有匹配到上述条件，保持不变
))%>%
mutate(MotherOccupation = case_when(
MotherOccupation == 0 ~ "临时工",
MotherOccupation == 1 ~ "个体经营",
MotherOccupation == 2 ~ "一般管理",
MotherOccupation == 3 ~ "中层管理",
MotherOccupation == 4 ~ "高级管理",
TRUE ~ as.character(MotherOccupation)  # 如果没有匹配到上述条件，保持不变
))%>%
mutate(income = case_when(
income == 0 ~ "zero",
income < 2000 ~ "<2000",
between(income, 2000, 5000) ~ "2000~5000",
between(income, 5000, 10000) ~ "5000~10000",
between(income, 10000, 30000) ~ "10000~30000",
between(income, 30000, 50000) ~ "30000~50000",
between(income, 50000, 100000) ~ "50000~100000",
between(income, 100000, 150000) ~ "100000~150000",
between(income, 150000, 200000) ~ "150000~200000",
income >= 200000 ~ "≥200000",
TRUE ~ as.character(income)  # 如果没有匹配的条件，保持不变
))%>%
mutate(phq_al = rowSums(select(., starts_with("phq_")))) %>%
mutate(phq = case_when(
phq_al >= 0 & phq_al <= 4 ~ "none",
phq_al >= 5 & phq_al <= 9 ~ "mild",
phq_al >= 10 & phq_al <= 14 ~ "moderate",
phq_al >= 15 & phq_al <= 19 ~ "mod to severe",
phq_al >= 20  ~ "severe",
TRUE ~ NA_character_
))%>%
mutate(selfclarity_al = rowSums(select(., starts_with("selfclarity_")))) %>%
mutate(gad_al = rowSums(select(., starts_with("gad_")))) %>%
mutate(gad = case_when(
gad_al >= 0 & gad_al <= 4 ~ "none",
gad_al >= 5 & gad_al <= 9 ~ "mild",
gad_al >= 10 & gad_al <= 14 ~ "moderate",
gad_al >= 15 ~ "severe",
TRUE ~ NA_character_
))
day0_1<-day0_all%>%
select(age,obj_ses1,fri_ses2,sex,fatherEdu, motherEdu,FatherOccupation,MotherOccupation,income,phq,gad)
#print(prop.table(day0_1$age))
print(table(day0_1$phq,day0_1$gad))
#绘制离散变量的棒图
plot_bar(day0_all)
#绘制连续变量的直方图
plot_histogram(day0_all)
}
plot_descript_day0("phase_010")
subj_phase_day2 <- function(phase,Moneny, Paid_date) {
# 读取 subj_day0_phase_003 数据
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
# 读取 subj_day2_phase_003 数据
subj_day2 <- read.csv(list.files(paste0("../../../Data/raw/day2/", phase, "/"), pattern = "^SEE.*\\.csv$", full.names = TRUE), header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8",colClasses=c("UserId"="character")) %>%
slice(-1) %>%
select(-c("Subject.IDs", "NodeId", "NodeId.1", "Node.1", "Env_Q1.1", "Env_Q2", "Env_Q3.1", "Env_Q4.1", "Env_Q5.1", "X")) %>%
rename(
USERID = UserId,#脑岛编号
Time_day2 = Time,#做实验的时间
ever_join_similar = Env_Q1,#是否曾经参加类似的实验
ever_SRET = Env_Q2_item1,#是否曾经参加SRET
ever_AlT = Env_Q2_item2,#是否曾经参加ALT
ever_ques = Env_Q2_item3,#是否曾经参加问卷
join_interval = Env_Q3,#上次参加的时间间隔
going_normal = Env_Q4,#实验是否正常
full_screen = Env_Q5,#是否全程全屏
exit_fullScreen = Env_Q6,#什么时候退出全屏
what_problem = Env_Q7,#有没有什么问题
distrub = Env_Q8,#是否受到干扰
when_disturb = Env_Q9,#什么时候受到干扰
feedbackm = Env_Q10,#对实验的意见
aim = Env_Q11#认为实验目的是什么
) %>%
mutate(Eligible = "",
Moneny = Moneny,
Paid_date = Paid_date) %>%
merge(., subj_day0[, c("USERID", "ID", "ParticipantID")], by = "USERID", all.x = TRUE)
#####由于脑岛故障，未能在脑岛保存，但是在邮箱收到数据，找到被试的编号
# subj_day0_row <- subj_day0[subj_day0$ID == "phase_005_subj_17", c("USERID", "Subject.Name", "ParticipantID", "ID")]
# subj_day2 <- bind_rows(subj_day2, subj_day0_row)
# 将结果写入 Excel 文件
write.xlsx(subj_day2, paste0("../../../Data/raw/day2/", phase, "/subj_day2_", phase, ".xlsx"))
}
# 调用函数并传入相应的 phase 参数
subj_phase_day2("phase_009","10","1.5")
#check out all '.csv' files in a folder, ‘..’ 表示返回上一级目录，因此 ../../.. 表示在当前工作目录的上两级目录下找到 "4.Analysis" 目录
list.files("../../../Data/raw/day2/phase_009/jsPsych",pattern = "\\.csv$", full.names = TRUE)#修改批次号
combine_csv_files <- function(phase,firstnum, lastnum) {  ##[批次号，输入文件列表的文件起始编号，终止编号]
folder_path<-paste0("../../../Data/raw/day2/",phase,"/jsPsych")
files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
selected_files <- files[firstnum:lastnum] #输入文件列表的文件范围；起始编号：终止编号
combined_data <- NULL
for (file in files) {
tmp <- read.csv(file, header = TRUE, sep = ",", stringsAsFactors = FALSE, fileEncoding = "UTF-8")  # 逐个读取csv文件，fileEncoding可能为UTF-8 或 GBK
if (is.null(combined_data)) {
combined_data <- tmp
} else {
combined_data <- rbind(combined_data, tmp)
}
}
output_file<-paste0("../../../Data/raw/day2/",phase,"/day2_",phase,".csv")
write.csv(combined_data, output_file, row.names = FALSE)
}
# 使用示例，每次运行仅需修改此3个参数，[批次号，输入文件列表的文件起始编号，终止编号]
combine_csv_files("phase_009",1,22)
#记录单个被试subject well-being
day2_process<-function(phase){
#创建子文件夹"../../../Data/clean/clean_day2/phase"用于储存清洗后的文件
dir.create(paste0("../../../Data/clean/clean_day2/",phase), recursive = TRUE)
filePath<-paste0("../../../Data/raw/day2/",phase,"/day2_",phase,".csv")
day20 <- read.csv(filePath, fileEncoding = "UTF-8")
subj_day0 <- read.xlsx(paste0("../../../Data/raw/day0/", phase, "/subj_day0_", phase, ".xlsx"))
#记录被试的SRET
SRET <- day20 %>%
select(., c("subj_idx","ParticipantID", "Sex", "task_id", "screen_id", "person", "valence", "domain", "word", "math", "correct_response", "identity", "response", "responses", "rt", "correct")) %>%
filter(grepl("^SRET", task_id)) %>%
mutate(identity = case_when(
identity %in% c("朋友", "自己") ~ case_when(
identity == "朋友" ~ "friend",
identity == "自己" ~ "self"
),
TRUE ~ identity
)) %>%
mutate(person = case_when(
person %in% c("朋友", "自己") ~ case_when(
person == "朋友" ~ "friend",
person == "自己" ~ "self"
),
TRUE ~ person
)) %>%
mutate(correct = ifelse(
screen_id == "RJ_formal_2",
ifelse(identity == responses, 1, ifelse(identity != responses, 0, correct)),
correct
)) %>%
mutate(con = paste(person, valence, domain, sep = "_")) %>%
merge(., subj_day0[, c("ID", "subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
#记录被试ALT正式的数据
ALT2 <- day20 %>%
select(c("subj_idx","ParticipantID", "Sex", "Word", "Word2", "task_id", "screen_id", "Image", "condition", "word", "identity", "response", "responses", "correct_response", "rt", "correct")) %>%
filter(!grepl("^SRET", task_id)) %>%
filter(!is.na(screen_id)) %>%
filter(!is.na(correct) & correct != "") %>%
mutate(correct = ifelse(response == "null", NA, ifelse(correct, 1, 0))) %>%
mutate(Image = case_when(
Image == "img/circle.png" ~ "circle",
Image == "img/diamond.png" ~ "diamond",
Image == "img/square.png" ~ "square",
Image == "img/triangle.png" ~ "triangle",
Image == "img/ellipse.png" ~ "ellipse",
Image == "img/hexagon.png" ~ "hexagon",
Image == "img/pentagon.png" ~ "pentagon",
Image == "img/trapezoid.png" ~ "trapezoid",
TRUE ~ Image
)) %>%
mutate(domain = case_when(
grepl("好|坏", condition) ~ "moral",
grepl("强|弱", condition) ~ "ability",
TRUE ~ NA_character_
),
valence = case_when(
grepl("好|强", condition) ~ "positive",
grepl("坏|弱", condition) ~ "negative",
TRUE ~ NA_character_
),
person = case_when(
grepl("我", condition) ~ "self",
grepl("他|她", condition) ~ "friend",
TRUE ~ NA_character_
)) %>%
mutate(con = paste(domain, person, identity, sep = "_")) %>%
merge(., subj_day0[, c("ID", "subj_idx")], by = "subj_idx", all.x = TRUE)%>%
select(-c("subj_idx"))
# 记录day2的问卷的数据
day2_q <- day20 %>%
filter(trial_index == 0) %>%
select(ParticipantID, everything(), -c("friend_name","rt", "stimulus", "response", "trial_type", "trial_index", "time_elapsed", "internal_node_id", "success","user_agent","question_order","responses","item_order","radio_event_ids","radio_event_times","key_event_times","mouse_event_times","straightlining","zigzagging","value","honeypot"))%>%
select( everything(), -c("timeout", "failed_images", "failed_audio", "failed_video", "view_history", "response_type", "key_press", "avg_frame_time","center_x","center_y","correct_response","correct","identity","Image","word","condition","task_id","screen_id","time_stamp","domain","valence","math","status","duration","Word","Word2","person","trap2_item","trap2"))%>%
mutate(across(starts_with("IPC"), ~ case_when(. == 0 ~ 1, . == 1 ~ 2, . == 2 ~ 3, TRUE ~ .)))%>%
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx", all.x = TRUE)%>%#修改phase_002
select(-c("subj_idx"))
day20<-day20%>%
merge(.,subj_day0[, c("ID","subj_idx")], by = "subj_idx",all.x = TRUE)%>%#修改phase_002
select(-c("subj_idx"))
output_path <- paste0("../../../Data/raw/day2/",phase,"/day2_",phase,".csv")
write.csv(day20, output_path)
output_path <- paste0("../../../Data/clean/clean_day2/",phase,"/SRET_",phase,".csv")
write.csv(SRET, output_path)
output_path <- paste0("../../../Data/clean/clean_day2/",phase,"/ALT2_",phase,".csv")
write.csv(ALT2, output_path)
output_path <- paste0("../../../Data/clean/clean_day2/",phase,"/day2_q_",phase,".csv")
write.csv(day2_q, output_path)
trap2<-day20%>%
filter(grepl("我", trap2_item) )%>%
select(c("ID","ParticipantID","trap2","trap2_item"))%>%
mutate(correct = ifelse(trap2 %in% c(1, 2, 3), 1, 0))#选1-3都是正确的
assign("trap2", trap2, envir = .GlobalEnv)  # 将陷阱题导入环境
}
day2_process("phase_009")
select_day2<-function(phase){
ALT2<-read.csv(paste0("../../../Data/clean/clean_day2/",phase,"/ALT2_",phase,".csv"))
SRET<-read.csv(paste0("../../../Data/clean/clean_day2/",phase,"/SRET_",phase,".csv"))
# ALT部分的筛选
ALT2_select<-ALT2%>%
filter(screen_id%in%c("ability","moral") )%>%
mutate(ID = as.character(ID)) %>%
mutate(rt=as.numeric(rt))%>% #转变被试编号和反应时类型为字符型与数值型
mutate(correct= as.numeric(correct))%>% ##重编码correct
mutate(con=paste(con,valence,sep = "_"))%>%#选择正式实验的数据
group_by(ID,con) %>%  #按被试与条件分组
summarise(
avg_rt = mean(rt, na.rm = TRUE),
max_rt = max(rt, na.rm = TRUE),
min_rt = min(rt, na.rm = TRUE),
sd_rt=sd(rt, na.rm = TRUE), #计算平均反应时
all_count=n(),#每个条件的总trial数量
row_count = sum(rt>=200 & rt <=1200, na.rm = TRUE),  #每个条件反应时符合条件的总数,舍弃按键太快和按键太慢的
correct_count = sum(correct == 1 & rt>=200 & rt <=1200, na.rm = TRUE),
acc = correct_count /  all_count #计算正确率= 正确/总数
)%>%
mutate(note = "") %>%
mutate(note = ifelse(acc < 0.2, "invalid", note))%>%#**各个图形的正确率不低于20%（ability_friend_match_negative）**
ungroup()
print(ALT2_select)
invalid_ALT2_select<-ALT2_select%>%
filter(note == "invalid")
print(invalid_ALT2_select)##**查看ALT的各个图形的正确率低于20%的被试**
ALT2_select2<-ALT2%>%
filter(screen_id%in%c("ability","moral") )%>%
mutate(ID = as.character(ID)) %>%
mutate(rt=as.numeric(rt))%>% #转变被试编号和反应时类型为字符型与数值型
mutate(correct= as.numeric(correct))%>%
mutate(note = "")%>%
group_by(ID,screen_id) %>%
summarise(
avg_rt2 = mean(rt, na.rm = TRUE),
max_rt2 = max(rt, na.rm = TRUE),
min_rt2 = min(rt, na.rm = TRUE),
sd_rt2=sd(rt, na.rm = TRUE),
all_count2 = n(),
correct_count2 = sum(correct == 1 & rt >= 200 & rt <= 1200, na.rm = TRUE),
acc2 = correct_count2 / all_count2,
note = ifelse(acc2 < 0.6, "invalid", note)#**道德、能力领域的总正确率不低于60%**
)
print(ALT2_select2)
invalid_ALT2_select2<-ALT2_select2%>%
filter(note == "invalid")
print(invalid_ALT2_select2)#**查看道德、能力领域的总正确率低于60%的被试**
# EW阶段的yes比例和rt汇总
SRET_EW<-SRET %>%
mutate(ID = as.character(ID)) %>%
mutate(rt=as.numeric(rt))%>% #转变被试编号和反应时类型为字符型与数值型
mutate(correct= as.numeric(correct))%>% ##重编码correct
filter(screen_id%in%c("EW_formal") )%>% #选择正式实验的数据
filter(!word %in% c("务实", "迷糊", "坚贞", "说谎", "主见", "缓慢", "素养", "低俗")) %>%                                                               group_by(ID,person,valence,domain)%>%
summarize(
avg_rt_mean= mean(rt, na.rm = TRUE),
avg_sd_rt=sd(rt, na.rm = TRUE),
all_max_rt = max(rt, na.rm = TRUE),
all_min_rt = min(rt, na.rm = TRUE),
N_Yes = sum(responses == "yes"),
N_No = sum(responses == "no"),
N=n(),
pro_yes=N_Yes/N,)
print(SRET_EW) ###查看评估阶段每个被试的反应时
SRET_EW_1<-SRET %>%
mutate(ID = as.character(ID)) %>%
mutate(rt=as.numeric(rt))%>% #转变被试编号和反应时类型为字符型与数值型
mutate(correct= as.numeric(correct))%>% ##重编码correct
filter(screen_id%in%c("EW_formal") )%>% #选择正式实验的数据
filter(!word %in% c("务实", "迷糊", "坚贞", "说谎", "主见", "缓慢", "素养", "低俗")) %>%                                                                 select(-ID)%>%                                                                                                                                 group_by(person,valence,domain)%>%
summarize(
avg_rt_mean= mean(rt, na.rm = TRUE),
avg_sd_rt=sd(rt, na.rm = TRUE),
all_max_rt = max(rt, na.rm = TRUE),
all_min_rt = min(rt, na.rm = TRUE),)
SRET_EW2_rt<-SRET %>%
mutate(ID = as.character(ID)) %>%
mutate(rt=as.numeric(rt))%>% #转变被试编号和反应时类型为字符型与数值型
mutate(correct= as.numeric(correct))%>% ##重编码correct
filter(screen_id%in%c("EW_formal") )%>% #选择正式实验的数据
filter(!word %in% c("务实", "迷糊", "坚贞", "说谎", "主见", "缓慢", "素养", "低俗")) %>%#去掉干扰词
group_by(ID)%>%
summarize(N_Yes = sum(responses == "yes"),
N_No = sum(responses == "no"),
N=n(),
pro_yes=N_Yes/N,
avg_rt = mean(rt, na.rm = TRUE),max_rt = max(rt, na.rm = TRUE),
min_rt = min(rt, na.rm = TRUE),
sd_rt=sd(rt, na.rm = TRUE),
) %>%
filter(max_rt>2000|min_rt<1500)
print(SRET_EW2_rt)##**查看评价词汇阶段反应时在1500-2000之外的被试**
###########计算每个被试的再认正确率#####
SRET_RJ <- SRET  %>%
mutate(ID = as.character(ID),
rt = as.numeric(rt),
correct = as.numeric(correct)) %>%
filter(screen_id %in% c("RJ_formal1")) %>%
filter(!word %in% c("严谨", "认真", "刻板", "白痴", "忠实", "宽宏", "徇私", "可鄙")) %>%
mutate(sdt = case_when((identity == "old" & (responses %in% c("familiar", "old"))) ~ "hit",
(identity == "old" & (responses == "new" )) ~ "miss",
(identity == "new" & (responses %in% c("familiar", "old"))) ~ "fa",
(identity == "new" & (responses == "new")) ~ "cr"),) %>%
# group_by(ID,domain, valence ) %>%#, valence
group_by(ID) %>%
summarize(
H = sum(sdt == "hit"),
M = sum(sdt == "miss"),
FA = sum(sdt == "fa"),
CR = sum(sdt == "cr"),
new= sum(responses %in% c("new")),#按键为新词
old=sum(responses %in% c("old")),
familiar=sum(responses %in% c("familiar")),
self_H = sum(sdt == "hit"& person=="self")/40,
friend_H = sum(sdt == "hit"& person=="friend")/40,
P_H = H/(H+M),
P_FA = FA/(FA+CR),
recognition = (H + CR) / (H + CR + M + FA),### valence * domain,4个条件 *（20 new+ 20 old）, 20 old = 10 self +10 friend
avg_rt = mean(rt, na.rm = TRUE),
sd_rt = sd(rt, na.rm = TRUE),
max_rt = max(rt, na.rm = TRUE),
min_rt = min(rt, na.rm = TRUE),
) %>%
mutate(note = "") %>%
mutate(
P_H = ifelse(P_H == 1, 1 - 1 / (2 * (H + M)), P_H),# if hit rate is 1, standardize it
P_FA = ifelse(P_FA == 0, 1 / (2 * (H + M)), P_FA), # if FA rate is 0, standardize it
Correct_recognition = P_H - P_FA,
Z_P_H = qnorm(P_H),
Z_P_FA = qnorm(P_FA),
d_prime = Z_P_H - Z_P_FA,
note = ifelse(recognition<=0.55, "invalid", note))
print(SRET_RJ)
invalid_SRET_RJ<-SRET_RJ%>%
filter(note == "invalid")
print(invalid_SRET_RJ)##**查看SRET的再认正确率低于或等于0.55，**
#**合并ALT2两种筛选标准下排除的无效数据**
ex_subj <- bind_rows(
ALT2_select %>% filter(note == "invalid"),
ALT2_select2 %>% filter(note == "invalid"),
SRET_RJ%>% filter(note == "invalid"))
#查看两个组合后的无效数据
print(ex_subj)
############################
###########计算每个被试的再认正确率#####
SRET_RJ2 <- SRET  %>%
mutate(ID = as.character(ID),
rt = as.numeric(rt),
correct = as.numeric(correct)) %>%
filter(screen_id %in% c("RJ_formal1")) %>%
filter(!word %in% c("严谨", "认真", "刻板", "白痴", "忠实", "宽宏", "徇私", "可鄙")) %>%
mutate(sdt = case_when((identity == "old" & (responses %in% c("familiar", "old"))) ~ "hit",
(identity == "old" & (responses == "new" )) ~ "miss",
(identity == "new" & (responses %in% c("familiar", "old"))) ~ "fa",
(identity == "new" & (responses == "new")) ~ "cr"),) %>%
group_by(ID, valence,domain) %>%#, 道德/能力*积极/消极
summarize(
H = sum(sdt == "hit"),
M = sum(sdt == "miss"),
FA = sum(sdt == "fa"),
CR = sum(sdt == "cr"),
new= sum(responses %in% c("new")),#按键为新词
old=sum(responses %in% c("old")),
familiar=sum(responses %in% c("familiar")),
self_H = sum(sdt == "hit"& person=="self")/10,
friend_H = sum(sdt == "hit"& person=="friend")/10,
P_H = H/(H+M),
P_FA = FA/(FA+CR),
recognition = (H + CR) / (H + CR + M + FA),#  40个
avg_rt = mean(rt, na.rm = TRUE),
sd_rt = sd(rt, na.rm = TRUE),
max_rt = max(rt, na.rm = TRUE),
min_rt = min(rt, na.rm = TRUE),
) %>%
mutate(note = "") %>%
mutate(
P_H = ifelse(P_H == 1, 1 - 1 / (2 * (H + M)), P_H),# if hit rate is 1, standardize it
P_FA = ifelse(P_FA == 0, 1 / (2 * (H + M)), P_FA), # if FA rate is 0, standardize it
Correct_recognition = P_H - P_FA,
Z_P_H = qnorm(P_H),
Z_P_FA = qnorm(P_FA),
d_prime = Z_P_H - Z_P_FA,
)%>%
filter(note == "invalid")
print(SRET_RJ2)
###############################
# 读取 subj_day1 数据
subj_day2 <- read.xlsx(paste0("../../../Data/raw/day2/", phase, "/subj_day2_", phase, ".xlsx"))
# 根据 ex_subj 的 ID 列填充 Eligible 列，如果在无效数据中，则填入no,否则为yes，上传到飞书subj_info的所有参加day1的被试信息
subj_day2 <- subj_day2 %>%
mutate(Eligible = ifelse(ID %in% ex_subj$ID, "no", "yes"))
# 将结果写入 Excel 文件，导出day1所有被试数据
write.xlsx(subj_day2, file = paste0("../../../Data/raw/day2/", phase, "/subj_day2_", phase, ".xlsx"))
# 从 subj_day2 中筛选 Eligible 列的值为 "yes" 的行，导出符合要求的被试数据
select_day2 <- subj_day2 %>%
filter(Eligible == "yes")
invalid_day2 <- subj_day2 %>%
filter(Eligible == "no")
write.xlsx(invalid_day2, file = paste0("../../../Data/raw/day2/", phase, "/invalid_day2_", phase, ".xlsx"))
# 将筛选后的结果写入 CSV 文件，这个是导入脑岛的被试信息
write.xlsx(select_day2, file = paste0("../../../Data/raw/day2/", phase, "/select_day2_", phase, ".xlsx"))
SRET_RJ_2 <- SRET %>%
mutate(ID = as.character(ID)) %>%
mutate(rt = as.numeric(rt)) %>%
mutate(correct = as.numeric(coalesce(correct,-1))) %>% #对新词按键判断的试次的correct记为-1
filter(screen_id %in% c("RJ_formal_2")) %>%
filter(!word %in% c("严谨", "认真", "刻板", "白痴", "忠实", "宽宏", "徇私", "可鄙")) %>%
mutate(sdt = case_when((identity == "self" & (correct=="1") )~ "self_hit",
#自我条件下的击中，信号是“self”，反应是“self”
(identity == "self" & (correct=="0") )~ "self_miss",
#自我条件下的漏报，信号是“self”，反应是“friend”
(identity == "friend" & (correct=="1" )) ~ "friend_hit",
#朋友条件下的击中，信号是“friend”，反应是“friend”
(identity == "friend" & (correct=="0" )) ~ "friend_miss",
#朋友条件下的漏报，信号是“friend”，反应是“self”
(is.na(identity) & (!is.na(response))) ~ "fa",
#新词（无信号），反应为self或者friend
) )
print(SRET_RJ_2)
SRET_RJ_2<-SRET_RJ_2%>%
group_by(ID,valence,domain) %>%
summarize(
n=n(), #所有按键反应了的试次
count_self = sum(responses == "self"),#所有反应是“self”的试次
count_friend = sum(responses == "friend"),#所有反应是“friend”的试次
self_H = sum(sdt == "self_hit"),#自我条件下的击中，信号是“self”，反应是“self”
friend_H = sum(sdt == "friend_hit"),#朋友条件下的击中，信号是“friend”，反应是“friend”
self_M = 10-self_H,# 信号为self，没有被反应为“self
friend_M = 10-friend_H, # 信号为friend，没有被反应为“friend
FA = sum(sdt == "fa"),#新词（无信号），反应为self或者friend
CR = 20-FA,#总共20新词，去掉被判断为旧词（信号），正确拒绝旧词
self_recognition = self_H /count_self,
# number of correct source attributions for self/ number of hits for self
friend_recognition = friend_H/ count_friend,
avg_rt = mean(rt, na.rm = TRUE),
sd_rt = sd(rt, na.rm = TRUE),
max_rt = max(rt, na.rm = TRUE),
min_rt = min(rt, na.rm = TRUE),
)
print(SRET_RJ_2)
########################################
# 使用group_by和summarize检查每个ID的行数
id_counts <- SRET_RJ_2 %>%
ungroup()%>%
group_by(ID) %>%
summarize(row_count = n())
# 检查是否每个ID都有4行数据
select_subj<- id_counts
print(select_subj)
}
##仅需修改此代码；分别为“批次号”，“发放金额”，“发放报酬的日期”
select_day2("phase_009")
View(trap2)

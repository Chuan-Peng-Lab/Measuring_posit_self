from util import parseInputData, tukey_all
import math


# --------------------------------------------------------------------------------
# Input-Dateiname:
input_filename = "Exp. group 2_raw data.tsv"
# Output-Dateiname:
output_filename = "Exp. group 2.lst"

# RÃ¼ckgabewert festlegen: eine Zeile festlegen , alle anderen Zeilen auskommentieren
grenze_type = "grenze1_5_oben"
#grenze_type = "grenze3_oben"
#grenze_type = "grenze1_5_unten"
#grenze_type = "grenze3_unten"
#
# --------------------------------------------------------------------------------


# -------------------------------------------------------------------------
# Werte einlesen
inputdata = parseInputData(input_filename)

# -------------------------------------------------------------------------
# Name der Ausgabedatei
outputfile = open(output_filename,"w")

alleRTO = []
grenzenVP = {}
q1VP = {}
q3VP = {}

print("-----------------------------------------------")
print("Werte pro VP ")
print("-----------------------------------------------")


for vpNr in inputdata:

	VPrto =[]

	for dataLine in inputdata[vpNr]:
					
		if dataLine["mt4.rt"]  != "":
			alleRTO.append(int(dataLine["mt4.rt"]))
			VPrto.append(int(dataLine["mt4.rt"]))
			
		
	(grenzenVP[vpNr], q1VP[vpNr], q3VP[vpNr]) = tukey_all(VPrto, grenze_type, vpNr)

print("-----------------------------------------------")
print("Werte Ã¼ber alle VPs ")
print("-----------------------------------------------")
grenze = tukey_all(alleRTO, grenze_type)
#print(grenze)

# -------------------------------------------------------------------------
# Werte in Datei schreiben
print("subject imz im inz in mmz mm mnz mn bmz bm bnz bn nmz nm nnz nn ime ine mme mne bme bne nme nne", file = outputfile)			
			
			
for vpNr in sorted(inputdata.keys()):
	print(vpNr, end = " " , file = outputfile)
	#print ((dataLine["handedness"])," " ,outputfile)
	#print ((dataLine["ExperimentName"])," " , outputfile)	
	print(grenzenVP[vpNr])

	
	im = []
	inon = []
	mm = []
	mn = []
	bm = []
	bn = []
	nm = []
	nn = []	
        
	
	for dataLine in inputdata[vpNr]:
		
		#TVP:
		if dataLine["mt4.rt"]  != "" and int(dataLine["mt4.rt"]) > 100 and int(dataLine["mt4.rt"]) < grenzenVP[vpNr]:
		
				
		# normale RT-Analyse in trial n;
				if dataLine["mt4.acc"] == "1" and dataLine["bed"] == "im":
					im.append(int(dataLine["mt4.rt"]))
				
				if dataLine["mt4.acc"] == "1" and dataLine["bed"] == "in":
					inon.append(int(dataLine["mt4.rt"]))
					
				if dataLine["mt4.acc"] == "1" and dataLine["bed"] == "mm":
					mm.append(int(dataLine["mt4.rt"]))
					
				if dataLine["mt4.acc"] == "1" and dataLine["bed"] == "mn":
					mn.append(int(dataLine["mt4.rt"]))
				
				if dataLine["mt4.acc"] == "1" and dataLine["bed"] == "bm":
					bm.append(int(dataLine["mt4.rt"]))
				
				if dataLine["mt4.acc"] == "1" and dataLine["bed"] == "bn":
					bn.append(int(dataLine["mt4.rt"]))
				if dataLine["mt4.acc"] == "1" and dataLine["bed"] == "nm":
					nm.append(int(dataLine["mt4.rt"]))
				
				if dataLine["mt4.acc"] == "1" and dataLine["bed"] == "nn":
					nn.append(int(dataLine["mt4.rt"]))



	print(len(im), sum(im), file = outputfile, end = " " )
	print(len(inon), sum(inon), file = outputfile, end = " " )
	print(len(mm), sum(mm), file = outputfile, end = " " )
	print(len(mn), sum(mn), file = outputfile, end = " " )
	print(len(bm), sum(bm), file = outputfile, end = " " )
	print(len(bn), sum(bn), file = outputfile, end = " " )
	print(len(nm), sum(nm), file = outputfile, end = " " )
	print(len(nn), sum(nn), file = outputfile, end = " " )
	
	ime = 0
	ine = 0
	mme = 0
	mne = 0
	bme = 0
	bne = 0
	nme = 0
	nne = 0
	
	for dataLine in inputdata[vpNr]:
		if dataLine["mt4.acc"] == "0" and dataLine["bed"] == "im":
			ime = ime+1
			
		if dataLine["mt4.acc"] == "0" and dataLine["bed"] == "in":
			ine = ine+1
					
		if dataLine["mt4.acc"] == "0" and dataLine["bed"] == "mm":
			mme = mme+1
			
		if dataLine["mt4.acc"] == "0" and dataLine["bed"] == "mn":
			mne = mne+1
				
		if dataLine["mt4.acc"] == "0" and dataLine["bed"] == "bm":
			bme = bme+1
				
		if dataLine["mt4.acc"] == "0" and dataLine["bed"] == "bn":
			bne = bne+1
		if dataLine["mt4.acc"] == "0" and dataLine["bed"] == "nm":
			nme = nme+1
				
		if dataLine["mt4.acc"] == "0" and dataLine["bed"] == "nn":
			nne = nne+1			
		#if dataLine["form"] == "dr" and dataLine["corr"] == "l" and dataLine["mt4.acc"] == "0":
			#dme = dme+1
					
		#if dataLine["form"] == "dr" and dataLine["corr"] == "s" and dataLine["mt4.acc"] == "0":
			#dne = dne+1
				
		#if dataLine["form"] == "kr" and dataLine["corr"] == "l" and dataLine["mt4.acc"] == "0":
			#kme = kme+1
				
		#if dataLine["form"] == "kr" and dataLine["corr"] == "s" and dataLine["mt4.acc"] == "0":
			#kne = kne+1
					
		#if dataLine["form"] == "qu" and dataLine["corr"] == "l" and dataLine["mt4.acc"] == "0":
			#qme = qme+1			
				
		#if dataLine["form"] == "qu" and dataLine["corr"] == "s" and dataLine["mt4.acc"] == "0":
			#qne = qne+1

	
	print(ime, file = outputfile, end = " " )
	print(ine, file = outputfile, end = " " )
	print(mme, file = outputfile, end = " " )
	print(mne, file = outputfile, end = " " )
	print(bme, file = outputfile, end = " " )
	print(bne, file = outputfile, end = " " )
	print(nme, file = outputfile, end = " " )
	print(nne, file = outputfile, end = " " )
	#print(dme, file = outputfile, end = " " )
	#print(dne, file = outputfile, end = " " )
	#print(kme, file = outputfile, end = " " )
	#print(kne, file = outputfile, end = " " )
	#print(qme, file = outputfile, end = " " )
	#print(qne, file = outputfile, end = " " )
	
	print("",file = outputfile)
	
	
	
outputfile.close()






